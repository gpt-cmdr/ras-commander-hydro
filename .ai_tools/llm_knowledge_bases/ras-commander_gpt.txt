Project Structure (files included):
├── .gitattributes
├── .gitignore
├── CLAUDE.md
├── Doc
│   ├── RASCommander_Help.html
│   └── README_Help.md
├── INSTALL.md
├── Refactor Plan.txt
├── Scripts
│   └── ras_commander
│       ├── LoadHECRAS2DGeometry.py
│       ├── LoadHECRAS2DResults.py
│       ├── LoadRASTerrain.py
│       ├── __init__.py
│       └── utils.py
├── Templates
│   └── Layers
│       └── archydro
│           └── ras-commander
│               ├── BoundaryConditionLines.lyrx
│               ├── Breaklines.lyrx
│               ├── MaximumFaceVelocity.lyrx
│               ├── MaximumWSE.lyrx
│               ├── MeshCellCenters.lyrx
│               ├── MeshCellFaces.lyrx
│               ├── MeshCellPolygons.lyrx
│               ├── MeshPerimeters.lyrx
│               ├── PipeConduits.lyrx
│               └── PipeNodes.lyrx
├── install_toolbox.ps1
├── ras-commander-hydro.LoadHECRAS6xHDFData.pyt.xml
├── ras-commander-hydro.pyt.xml
├── testdata
│   └── Test Data Notes.txt
└── toolboxes
    ├── RAS Commander.LoadHECRAS2DGeometry.pyt.xml
    ├── RAS Commander.LoadHECRAS2DResults.pyt.xml
    ├── RAS Commander.LoadHECRAS6xHDFData.pyt.xml
    ├── RAS Commander.LoadRASTerrain.pyt.xml
    ├── RAS Commander.pyt
    └── RAS Commander.pyt.xml

File: c:\GH\ras-commander-hydro\.gitattributes
==================================================
# Auto detect text files and perform LF normalization
* text=auto

==================================================

File: c:\GH\ras-commander-hydro\.gitignore
==================================================
# Test data
testdata/

# HDF files
*.hdf

==================================================

File: c:\GH\ras-commander-hydro\CLAUDE.md
==================================================
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

This is the Arc Hydro RAS Commander Tools repository - an ArcGIS Python Toolbox for HEC-RAS HDF5 data integration. The toolbox provides tools for loading and visualizing HEC-RAS 2D geometry and terrain data from HDF5 files directly within ArcGIS Pro.

**Sponsorship**: CLB Engineering (https://clbengineering.com/) in cooperation with ESRI

## Why Python Toolbox (.pyt)?

This project uses Python Toolbox format instead of binary toolbox format (.tbx) for several reasons:
- **System Toolbox Compatibility**: Better suited for system toolboxes in ArcGIS Pro
- **Version Control**: Text-based format ideal for Git (track changes, review diffs, collaborate)
- **No ArcGIS Pro Required**: Can be edited with any text editor
- **Dynamic Import**: Can import tool classes from separate Python modules
- **Cross-Platform**: Works identically across different OS and ArcGIS Pro installations

## Architecture

### Core Components

1. **Toolbox Structure** (refactored per Refactor Plan.txt):
   - Python Toolbox file: `toolboxes/RAS Commander.pyt`
   - Python scripts: `Scripts/ras_commander/` directory
     - `LoadRASTerrain.py` - Tool for loading HEC-RAS terrain layers
     - `LoadHECRAS6xHDFData.py` - Tool for loading HEC-RAS 6.x HDF data
     - `utils.py` - Shared utility functions
   - Original single-file toolbox: `ras-commander-hydro.pyt` (deleted - see git history)
   - Note: Production will also include an .atbx file that imports the .pyt classes

2. **Production Deployment Structure** (per Refactor Plan.txt):
   - Scripts: `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Scripts\ras_commander`
   - Toolbox: `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\toolboxes\RAS Commander.pyt`
   - Layers: `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Templates\Layers\archydro\ras-commander`
   - Images: `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Images`
   - Schemas: `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Data\archydro\Ras2DTemplate.gdb`

3. **GitHub Repository Structure** (mirrors ArcToolbox folder):
   - `Scripts/ras_commander/` - Python tool implementations
   - `toolboxes/RAS Commander.pyt` - Main Python toolbox file
   - `Templates/Layers/archydro/ras-commander/` - Layer templates (.lyrx files)
   - `Images/` - Images (used sparingly, mainly for CLB Engineering logo)
   - `Data/archydro/Ras2DTemplate.gdb` - Geodatabase schema templates
   - `unittests/` - Unit tests for the Python scripts
   - `testdata/` - HDF test files for different scenarios

### Key Technical Details

- **HDF5 Processing**: Uses h5py and numpy for efficient HDF5 file reading
- **Projection Handling**: Extracts projection info from HDF attributes or associated .prj files
- **Geometry Creation**: Optimized polygon creation using numpy vectorization
- **ArcGIS Integration**: Uses arcpy for all GIS operations and messaging


## Commands

### Development Installation
```powershell
# Option 1: Run as administrator using batch file
install_toolbox_as_admin.bat

# Option 2: Run PowerShell script directly (requires admin)
.\install_toolbox.ps1

# The script will copy all components to the ArcGIS Pro installation directories
# When prompted, choose 'y' for development mode to create symlinks instead of copying
```

### Testing
```bash
# Run unit tests from the unittests folder
python -m pytest unittests/

# Test data files for different scenarios:
# - 1D Unsteady: testdata/BaldEagle.p01.hdf
# - 1D Steady: testdata/BaldEagle.p02.hdf
# - 2D Unsteady: testdata/BaldEagleDamBrk.p07.hdf
# - 2D with Pipes/Pumps: testdata/DavisStormSystem.p02.hdf
# - 2D with SWMM Import: testdata/BeaverLakeSWMMImpor.p01.hdf (contains pipe networks with field name issues)
```

## Important Notes

- **HEC-RAS Version**: The toolbox only supports HEC-RAS 6.x Model Series Results
- **Logging**: Helper functions use `arcpy.AddMessage/AddWarning` for logging since they don't have access to the tool's messages object
- **Utility Folders**: The `.ai_tools` folder contains LLM knowledge base generation utilities - ignore it for most purposes
- **Layer Templates**: The repository includes pre-configured layer templates (.lyrx files) for visualizing different HEC-RAS data types:
  - 2D Breaklines
  - Maximum Velocity at Cell Faces
  - Maximum Water Surface Elevation at Cell Centers
  - Mesh Area Perimeters
  - Mesh Cell Centers, Faces, and Polygons
  - Pipe Conduits and Nodes (for storm/sewer network visualization)

## HDF Data Field Handling

### Known Issues and Solutions

1. **Field Name Conflicts with ArcGIS System Fields**
   - Fields named "Shape", "OBJECTID", "SHAPE_LENGTH", etc. conflict with ArcGIS system fields
   - Solution: The tool automatically renames these fields (e.g., "Shape" → "Shape_Type")

2. **Special Characters in Field Names**
   - HEC-RAS field names may contain characters that ArcGIS doesn't support (apostrophes, colons, parentheses)
   - Solution: The tool automatically cleans field names by replacing special characters with underscores and removing apostrophes

3. **Field Name Typos in HDF Files**
   - Some HDF files contain typos (e.g., "Condtui Connections" instead of "Conduit Connections")
   - Solution: The tool automatically corrects known typos during field name processing

4. **NaN Values in Numeric Fields**
   - HDF files may contain NaN (Not a Number) values that cause type compatibility errors
   - Solution: The tool converts NaN values to NULL for proper handling in ArcGIS

5. **Boolean Fields**
   - HDF boolean fields need special handling for ArcGIS compatibility
   - Solution: Boolean values are converted to SHORT fields (0/1 values)

### Field Type Detection
The tool automatically detects field types based on data values:
- **SHORT**: Boolean values
- **LONG**: Integer values
- **DOUBLE**: Floating-point values (including fields with all NaN values that sound numeric)
- **TEXT**: String values (with calculated field lengths based on actual data)

### Debugging Field Issues
When encountering field-related errors:
1. Check the tool messages for DEBUG output showing original vs. cleaned field names
2. Look for field mapping errors that show expected vs. available fields
3. The tool provides detailed error messages when field type conversions fail

## Troubleshooting

### Common Issues
1. **"Script cannot be loaded"**: PowerShell execution policy issue
   - Use the batch file or run: `Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser`

2. **"Access denied"**: Ensure running as administrator and ArcGIS Pro is closed

3. **"ArcGIS Pro not found"**: Verify ArcGIS Pro installation in standard location

4. **"Shape already exists" error**: Field name conflicts with ArcGIS system fields
   - The tool should automatically handle this, but check DEBUG messages for field renaming

5. **"Cannot find field" error**: Field name mismatch between HDF data and ArcGIS
   - Check tool messages for field name transformations
   - Look for typos in HDF field names that need correction

6. **"Value type is incompatible with field type" error**: NaN or type conversion issues
   - Usually caused by NaN values in numeric fields
   - The tool automatically converts NaN to NULL

### Verifying Installation
1. Open ArcGIS Pro
2. Go to Catalog pane → Toolboxes → System Toolboxes
3. Look for "RAS Commander"
4. Tools available: Load HEC-RAS Terrain, Load HEC-RAS 6.x HDF Data
==================================================

File: c:\GH\ras-commander-hydro\INSTALL.md
==================================================
# Installation Instructions for Arc Hydro RAS Commander Toolbox

## Prerequisites

- ArcGIS Pro must be installed
- Administrator privileges are required to install to Program Files

## Installation Methods

### Method 1: Using the Batch File (Easiest)

1. Double-click `install_toolbox_as_admin.bat`
2. Click "Yes" when Windows asks for administrator privileges
3. Follow the prompts in the PowerShell window

### Method 2: Using PowerShell Directly

1. Right-click on `install_toolbox.ps1`
2. Select "Run with PowerShell"
3. If prompted for administrator privileges, click "Yes"

OR

1. Open PowerShell as Administrator
2. Navigate to the repository directory
3. Run: `.\install_toolbox.ps1`

### Method 3: Manual Installation

If the scripts don't work, you can manually copy the files:

1. Copy `Scripts\ras_commander\*` to:
   `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Scripts\ras_commander\`

2. Copy `toolboxes\RAS Commander.pyt` to:
   `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\toolboxes\RAS Commander.pyt`

3. (Optional) Copy layer templates, images, and geodatabase templates to their respective directories

## Development Mode

The installation script offers a "development mode" option that creates symbolic links instead of copying files. This is useful for developers because:

- Changes made in the repository are immediately reflected in ArcGIS Pro
- No need to reinstall after making changes
- Easy to switch between development and production versions

To use development mode:
1. Run the installation script
2. When prompted, type 'y' to create symlinks

Note: Creating symbolic links requires administrator privileges on Windows.

## Verifying Installation

After installation:

1. Open ArcGIS Pro
2. Go to the Catalog pane
3. Navigate to Toolboxes → System Toolboxes
4. Look for "RAS Commander"
5. The tools should be available:
   - Load HEC-RAS Terrain
   - Load HEC-RAS 6.x HDF Data

## Troubleshooting

If you encounter issues:

1. **"Script cannot be loaded because running scripts is disabled"**
   - This is a PowerShell execution policy issue
   - The batch file should bypass this, but if not, run:
     `Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser`

2. **"Access denied" errors**
   - Ensure you're running as administrator
   - Check that ArcGIS Pro is not running

3. **"ArcGIS Pro not found"**
   - Verify ArcGIS Pro is installed
   - Check if it's installed in a non-standard location

## Uninstallation

To remove the toolbox:

1. Delete the following:
   - Directory: `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Scripts\ras_commander`
   - File: `C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\toolboxes\RAS Commander.pyt`

2. (Optional) Remove any layer templates, images, or geodatabase templates that were installed
==================================================

File: c:\GH\ras-commander-hydro\install_toolbox.ps1
==================================================
# install_toolbox.ps1
#
# Installs the Arc Hydro RAS Commander toolbox for local development.
# This script copies all toolbox files from the repository to the ArcGIS Pro installation directories.
#
# Usage:
#   Right-click on this file and select "Run with PowerShell" 
#   OR
#   Open PowerShell as Administrator and run: .\install_toolbox.ps1
#
# Note: This script requires administrator privileges to write to Program Files.

# Check if running as administrator
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "This script requires Administrator privileges." -ForegroundColor Red
    Write-Host "Please run PowerShell as Administrator and try again." -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Press any key to exit..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
}

Write-Host "Arc Hydro RAS Commander Toolbox Installer" -ForegroundColor Cyan
Write-Host ("=" * 50) -ForegroundColor Cyan
Write-Host ""

# Get the script directory (repository root)
$repoRoot = Split-Path -Parent $MyInvocation.MyCommand.Definition

# Function to find ArcGIS Pro installation
function Find-ArcGISPro {
    $potentialPaths = @(
        "C:\Program Files\ArcGIS\Pro",
        "C:\Program Files (x86)\ArcGIS\Pro",
        "$env:ProgramFiles\ArcGIS\Pro",
        "${env:ProgramFiles(x86)}\ArcGIS\Pro"
    )
    
    # Check each potential path
    foreach ($path in $potentialPaths) {
        if (Test-Path $path) {
            $toolboxPath = Join-Path $path "Resources\ArcToolBox"
            if (Test-Path $toolboxPath) {
                return $path
            }
        }
    }
    
    # Check registry
    try {
        $regPath = "HKLM:\SOFTWARE\ESRI\ArcGISPro"
        if (Test-Path $regPath) {
            $installDir = (Get-ItemProperty -Path $regPath -Name InstallDir -ErrorAction SilentlyContinue).InstallDir
            if ($installDir -and (Test-Path $installDir)) {
                return $installDir
            }
        }
    } catch {
        # Registry check failed, continue
    }
    
    return $null
}

# Find ArcGIS Pro installation
$arcgisProPath = Find-ArcGISPro
if (-not $arcgisProPath) {
    Write-Host "ERROR: Could not find ArcGIS Pro installation." -ForegroundColor Red
    Write-Host "Please ensure ArcGIS Pro is installed." -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Press any key to exit..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
}

Write-Host "Found ArcGIS Pro at: $arcgisProPath" -ForegroundColor Green
Write-Host ""

# Define source and destination mappings
$mappings = @(
    @{
        Name = "Python Scripts"
        Source = Join-Path $repoRoot "Scripts\ras_commander"
        Destination = Join-Path $arcgisProPath "Resources\ArcToolBox\Scripts\ras_commander"
        Type = "Directory"
        Required = $true
    },
    @{
        Name = "Python Toolbox"
        Source = Join-Path $repoRoot "toolboxes\RAS Commander.pyt"
        Destination = Join-Path $arcgisProPath "Resources\ArcToolBox\toolboxes\RAS Commander.pyt"
        Type = "File"
        Required = $true
    },
    @{
        Name = "Layer Templates"
        Source = Join-Path $repoRoot "Templates\Layers\archydro\ras-commander"
        Destination = Join-Path $arcgisProPath "Resources\ArcToolBox\Templates\Layers\archydro\ras-commander"
        Type = "Directory"
        Required = $false
    },
    @{
        Name = "Images"
        Source = Join-Path $repoRoot "Images"
        Destination = Join-Path $arcgisProPath "Resources\ArcToolBox\Images"
        Type = "Directory"
        Required = $false
    },
    @{
        Name = "Geodatabase Template"
        Source = Join-Path $repoRoot "Data\archydro\Ras2DTemplate.gdb"
        Destination = Join-Path $arcgisProPath "Resources\ArcToolBox\Data\archydro\Ras2DTemplate.gdb"
        Type = "Directory"
        Required = $false
    }
)

Write-Host "Installing Arc Hydro RAS Commander components..." -ForegroundColor Yellow
Write-Host ""

$successCount = 0
$errorCount = 0
$skippedCount = 0

foreach ($mapping in $mappings) {
    Write-Host "Installing: $($mapping.Name)" -ForegroundColor White
    
    if (-not (Test-Path $mapping.Source)) {
        if ($mapping.Required) {
            Write-Host "  ERROR: Source not found: $($mapping.Source)" -ForegroundColor Red
            $errorCount++
        } else {
            Write-Host "  Skipping (optional component not found)" -ForegroundColor Gray
            $skippedCount++
        }
        continue
    }
    
    try {
        # Create parent directory if it doesn't exist
        $parentDir = Split-Path -Parent $mapping.Destination
        if (-not (Test-Path $parentDir)) {
            New-Item -ItemType Directory -Path $parentDir -Force | Out-Null
        }
        
        # Remove existing destination if it exists
        if (Test-Path $mapping.Destination) {
            Remove-Item -Path $mapping.Destination -Recurse -Force
        }
        
        # Copy the content
        if ($mapping.Type -eq "Directory") {
            Copy-Item -Path $mapping.Source -Destination $mapping.Destination -Recurse -Force
        } else {
            # For files, ensure the destination directory exists
            $destDir = Split-Path -Parent $mapping.Destination
            if (-not (Test-Path $destDir)) {
                New-Item -ItemType Directory -Path $destDir -Force | Out-Null
            }
            Copy-Item -Path $mapping.Source -Destination $mapping.Destination -Force
        }
        
        Write-Host "  Success: Copied to $($mapping.Destination)" -ForegroundColor Green
        $successCount++
        
    } catch {
        Write-Host "  ERROR: Failed to copy - $_" -ForegroundColor Red
        $errorCount++
    }
}

Write-Host ""
Write-Host ("=" * 50) -ForegroundColor Cyan
Write-Host "Installation Summary:" -ForegroundColor Cyan
Write-Host "  Successful: $successCount components" -ForegroundColor Green
Write-Host "  Failed: $errorCount components" -ForegroundColor $(if ($errorCount -gt 0) { "Red" } else { "Gray" })
Write-Host "  Skipped: $skippedCount optional components" -ForegroundColor Gray
Write-Host ""

if ($errorCount -gt 0) {
    Write-Host "Some components failed to install. Please check the errors above." -ForegroundColor Yellow
} else {
    Write-Host "All components installed successfully!" -ForegroundColor Green
    Write-Host ""
    Write-Host "To use the toolbox in ArcGIS Pro:" -ForegroundColor Yellow
    Write-Host "  1. Open ArcGIS Pro"
    Write-Host "  2. Go to the Catalog pane"
    Write-Host "  3. Navigate to Toolboxes > Arc Hydro RAS Commander"
    Write-Host "  4. The tools will be available there"
}

Write-Host ""
Write-Host ("-" * 50) -ForegroundColor Gray

# Ask about development mode (symlinks)
Write-Host ""
$response = Read-Host "Would you like to create development symlinks instead of copying? (y/N)"

if ($response -eq 'y' -or $response -eq 'Y') {
    Write-Host ""
    Write-Host "Creating symlinks for development mode..." -ForegroundColor Yellow
    Write-Host "(This allows changes in the repo to be reflected immediately)" -ForegroundColor Gray
    Write-Host ""
    
    $symlinkSuccess = 0
    $symlinkError = 0
    
    foreach ($mapping in $mappings) {
        if (-not (Test-Path $mapping.Source)) {
            continue
        }
        
        Write-Host "Creating symlink: $($mapping.Name)" -ForegroundColor White
        
        try {
            # Remove existing destination if it exists
            if (Test-Path $mapping.Destination) {
                Remove-Item -Path $mapping.Destination -Recurse -Force
            }
            
            # Create parent directory if needed
            $parentDir = Split-Path -Parent $mapping.Destination
            if (-not (Test-Path $parentDir)) {
                New-Item -ItemType Directory -Path $parentDir -Force | Out-Null
            }
            
            # Create symlink
            New-Item -ItemType SymbolicLink -Path $mapping.Destination -Target $mapping.Source | Out-Null
            
            Write-Host "  Success: Symlinked to $($mapping.Destination)" -ForegroundColor Green
            $symlinkSuccess++
            
        } catch {
            Write-Host "  ERROR: Failed to create symlink - $_" -ForegroundColor Red
            $symlinkError++
        }
    }
    
    Write-Host ""
    Write-Host "Symlink Summary:" -ForegroundColor Cyan
    Write-Host "  Successful: $symlinkSuccess symlinks" -ForegroundColor Green
    Write-Host "  Failed: $symlinkError symlinks" -ForegroundColor $(if ($symlinkError -gt 0) { "Red" } else { "Gray" })
}

Write-Host ""
Write-Host "Press any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
==================================================

File: c:\GH\ras-commander-hydro\ras-commander-hydro.LoadHECRAS6xHDFData.pyt.xml
==================================================
<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en"><Esri><CreaDate>20250628</CreaDate><CreaTime>10513800</CreaTime><ArcGISFormat>1.0</ArcGISFormat><SyncOnce>TRUE</SyncOnce></Esri></metadata>

==================================================

File: c:\GH\ras-commander-hydro\ras-commander-hydro.pyt.xml
==================================================
<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en"><Esri><CreaDate>20250628</CreaDate><CreaTime>10512900</CreaTime><ArcGISFormat>1.0</ArcGISFormat><SyncOnce>TRUE</SyncOnce><ModDate>20250628</ModDate><ModTime>105129</ModTime></Esri><toolbox name="ras-commander-hydro" alias="RASCommander"><arcToolboxHelpPath>c:\program files\arcgis\pro\Resources\Help\gp</arcToolboxHelpPath><toolsets/></toolbox><dataIdInfo><idCitation><resTitle>ras-commander-hydro</resTitle></idCitation></dataIdInfo><distInfo><distributor><distorFormat><formatName>ArcToolbox Toolbox</formatName></distorFormat></distributor></distInfo></metadata>

==================================================

File: c:\GH\ras-commander-hydro\Refactor Plan.txt
==================================================




For the production Arc Hydro RAS Commander Tools, there will be 5 file locations: 


ras_commander folder in the Scripts folder: 
C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Scripts\ras_commander
One .py script per toolbox is preferred.  

Toolbox Location:
C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\toolboxes\Arc Hydro RAS Commander.tbx
There will be one toolbox with all of Arc Hydro RAS Commander Tools stored in one file: 

Layers (.lyrx) Location:
C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Templates\Layers\archydro\ras-commander
This subfolder will hold any layer files

Images (.png) Location: 
C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Images
Use sparingly, only for CLB Engineering Logo

Geodatabase Schemas: 
C:\Program Files\ArcGIS\Pro\Resources\ArcToolBox\Data\archydro\Ras2DTemplate.gdb




In the Github, there will be a 5 subfolders that will mirror the "ArcToolbox" folder, which will be used for deployments.  Only these folders are included in deployments, other folders will exist in the GitHub.   The folders being synced (at build time by ESRI and by the installation powershell scripts for development testing, or running directly out of the github folder for branch testing).  The folders and files that are mirrored for production are as follows: 


ras_commander folder in the Scripts folder: 
Scripts\ras_commander
This folder contains all of the .py files referenced by the toolbox

Toolbox Location:
toolboxes\Arc Hydro RAS Commander.pyt
toolboxes\Arc Hydro RAS Commander.aprx (future effort, for production)

Layers (.lyrx) Location:
Templates\Layers\archydro\ras-commander\
This folder contains any layer files needed for styling

Images (.png) Location: 
Images
RAS-Commander SVG logo 

Geodatabase Schemas: 
Data\archydro\Ras2DTemplate.gdb


In the future I will also need an .atbx file that will be for production use, which imports the classes of my .pyt and presents an .atbx for ArcGIS to ingest as part of it's system toolboxes.  

Also, there needs to be a install_toolbox.py script that will allow me to install the toolbox locally for development purposes.  It should overwrite the existing files in each folder with the files from the selected subfolders above.


Using this scheme, these folders can be directly included/merged at production, or for production testing, or local branch testing from the github repo folder.  Relative folder references should be used throughout. 



the .ai_tools folder is a utility folder for summarizing repostiories.  Ignore it for most purposes.  





==================================================

File: c:\GH\ras-commander-hydro\Doc\RASCommander_Help.html
==================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RAS Commander Toolbox Help</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .header {
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 30px;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
        }
        .header p {
            margin: 10px 0 0 0;
            font-size: 1.2em;
        }
        .tool-section {
            background-color: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .tool-section h2 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        .tool-section h3 {
            color: #34495e;
            margin-top: 20px;
        }
        .parameter {
            background-color: #ecf0f1;
            padding: 15px;
            margin: 10px 0;
            border-left: 4px solid #3498db;
            border-radius: 3px;
        }
        .parameter h4 {
            margin: 0 0 10px 0;
            color: #2c3e50;
        }
        .warning {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-left: 4px solid #f39c12;
            padding: 15px;
            margin: 20px 0;
            border-radius: 3px;
        }
        .warning h4 {
            margin: 0 0 10px 0;
            color: #856404;
        }
        .note {
            background-color: #d1ecf1;
            border: 1px solid #bee5eb;
            border-left: 4px solid #17a2b8;
            padding: 15px;
            margin: 20px 0;
            border-radius: 3px;
        }
        ul {
            margin: 10px 0;
            padding-left: 30px;
        }
        code {
            background-color: #f8f9fa;
            padding: 2px 5px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            background-color: #ecf0f1;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>RAS Commander Toolbox</h1>
        <p>ArcGIS Python Toolbox for HEC-RAS HDF5 Data Integration</p>
    </div>

    <div class="tool-section">
        <h2>Overview</h2>
        <p>The RAS Commander Toolbox provides tools for loading and visualizing HEC-RAS 2D geometry, terrain, and results data from HDF5 files directly within ArcGIS Pro. This toolbox is a direct port of the HDF5 data extraction logic from the <a href="https://github.com/gpt-cmdr/ras-commander">ras-commander library</a>.</p>
        
        <h3>Sponsorship</h3>
        <p>The development and porting of these tools to the ArcGIS platform was generously sponsored by <a href="https://clbengineering.com/">CLB Engineering</a> in cooperation with ESRI.</p>
        
        <h3>Requirements</h3>
        <ul>
            <li>ArcGIS Pro 2.8 or higher</li>
            <li>HEC-RAS 6.x model files</li>
            <li>Python packages: h5py, numpy (included with ArcGIS Pro)</li>
        </ul>
    </div>

    <div class="tool-section">
        <h2>Load HEC-RAS 2D Geometry Layers</h2>
        <p>This tool extracts 2D geometry elements from HEC-RAS geometry (<code>g*.hdf</code>) or plan (<code>p*.hdf</code>) files.</p>
        
        <h3>Available Geometry Elements</h3>
        <ul>
            <li><strong>2D Breaklines</strong> - Mesh refinement lines with cell spacing attributes</li>
            <li><strong>2D Boundary Condition Lines</strong> - External and internal boundary conditions</li>
            <li><strong>Mesh Area Perimeters</strong> - 2D flow area boundaries</li>
            <li><strong>Mesh Cell Centers</strong> - Point locations at the center of each mesh cell</li>
            <li><strong>Mesh Cell Faces</strong> - Line geometries representing cell edges</li>
            <li><strong>Mesh Cells (Polygons)</strong> - Full polygon representation of mesh cells</li>
            <li><strong>Pipe Conduits</strong> - Storm/sewer pipe networks (if present)</li>
            <li><strong>Pipe Nodes</strong> - Junction points in pipe networks (if present)</li>
        </ul>
        
        <div class="note">
            <h4>Performance Note</h4>
            <p>Mesh cell polygon creation can be time-consuming for large meshes (>100,000 cells). Consider extracting only the necessary elements for your analysis.</p>
        </div>
        
        <h3>Parameters</h3>
        <div class="parameter">
            <h4>Geometry or Plan HDF File</h4>
            <p>Select a HEC-RAS geometry file (<code>g*.hdf</code>) or plan file (<code>p*.hdf</code>) containing 2D geometry data.</p>
        </div>
        <div class="parameter">
            <h4>Override CRS (Optional)</h4>
            <p>Specify a coordinate reference system if it cannot be determined from the HEC-RAS project files. The tool will first attempt to read the CRS from the HDF file or associated .prj files.</p>
        </div>
        <div class="parameter">
            <h4>Geometry Elements to Load</h4>
            <p>Select one or more geometry elements to extract. Each selected element will create a separate output feature class.</p>
        </div>
    </div>

    <div class="tool-section">
        <h2>Load HEC-RAS 2D Results Summary Layers</h2>
        <p>This tool extracts summary results data from HEC-RAS plan files (<code>p*.hdf</code>) that contain simulation results.</p>
        
        <h3>Available Results</h3>
        <ul>
            <li><strong>Max WSE at Cell Centers</strong> - Maximum water surface elevation achieved at each cell center during the simulation, with the time of occurrence</li>
            <li><strong>Max Vel at Cell Faces</strong> - Maximum velocity achieved at each cell face during the simulation, with the time of occurrence</li>
        </ul>
        
        <div class="warning">
            <h4>Important</h4>
            <p>This tool requires a plan HDF file that contains results data. Geometry-only files will not work.</p>
        </div>
        
        <h3>Parameters</h3>
        <div class="parameter">
            <h4>Plan HDF File with Results</h4>
            <p>Select a HEC-RAS plan file (<code>p*.hdf</code>) that contains simulation results.</p>
        </div>
        <div class="parameter">
            <h4>Override CRS (Optional)</h4>
            <p>Specify a coordinate reference system if it cannot be determined from the HEC-RAS project files.</p>
        </div>
        <div class="parameter">
            <h4>Results to Load</h4>
            <p>Select one or more results types to extract. Each selected result will create a separate output feature class.</p>
        </div>
    </div>

    <div class="tool-section">
        <h2>Load HEC-RAS Terrain</h2>
        <p>This tool reads terrain layer definitions from a HEC-RAS project's <code>.rasmap</code> file and loads the associated VRT (Virtual Raster) files into ArcGIS Pro.</p>
        
        <div class="warning">
            <h4>Important Limitations</h4>
            <ul>
                <li>This tool loads the underlying terrain TIFFs as a VRT with the priority from HEC-RAS in place</li>
                <li>It does <strong>NOT</strong> include terrain modifications done as vector terrain modifications in RAS Mapper</li>
                <li>Only the base terrain raster data will be loaded</li>
                <li>If your HEC-RAS model includes vector terrain modifications (breaklines, high ground, etc.), those modifications will not be reflected in the loaded terrain</li>
            </ul>
        </div>
        
        <h3>How It Works</h3>
        <ol>
            <li>Reads the <code>.rasmap</code> file associated with your HEC-RAS project</li>
            <li>Finds all terrain layers defined in the project</li>
            <li>Loads the corresponding VRT files that reference the underlying TIFF files</li>
            <li>Applies the layer priority as defined in HEC-RAS</li>
        </ol>
        
        <h3>Parameters</h3>
        <div class="parameter">
            <h4>HEC-RAS Project File (*.prj)</h4>
            <p>Select the HEC-RAS project file. The tool will automatically find the associated <code>.rasmap</code> file in the same directory.</p>
        </div>
        <div class="parameter">
            <h4>Import All Terrains</h4>
            <p>Check this box to import all terrain layers found in the project. When checked, the terrain selection list will be disabled.</p>
        </div>
        <div class="parameter">
            <h4>Terrains to Load</h4>
            <p>Select specific terrain layers to load. This list is populated from the terrains found in the <code>.rasmap</code> file.</p>
        </div>
    </div>

    <div class="tool-section">
        <h2>Common Issues and Solutions</h2>
        
        <h3>CRS Not Found</h3>
        <p>If the tool cannot determine the coordinate reference system:</p>
        <ul>
            <li>Check if a <code>.prj</code> file exists in your HEC-RAS project directory</li>
            <li>Use the "Override CRS" parameter to manually specify the correct projection</li>
        </ul>
        
        <h3>Field Name Conflicts</h3>
        <p>The tool automatically handles field name conflicts with ArcGIS system fields by:</p>
        <ul>
            <li>Renaming "Shape" to "Shape_Type"</li>
            <li>Appending "_USER" to other conflicting field names</li>
            <li>Replacing special characters with underscores</li>
        </ul>
        
        <h3>Large Dataset Performance</h3>
        <p>For models with large meshes:</p>
        <ul>
            <li>Consider extracting elements to file geodatabases instead of in-memory workspaces</li>
            <li>Extract only the necessary elements for your analysis</li>
            <li>Process mesh cells in smaller 2D flow areas if possible</li>
        </ul>
    </div>

    <div class="footer">
        <p><strong>RAS Commander Toolbox</strong> | Sponsored by <a href="https://clbengineering.com/">CLB Engineering</a></p>
        <p>Based on the <a href="https://github.com/gpt-cmdr/ras-commander">ras-commander library</a></p>
    </div>
</body>
</html>
==================================================

File: c:\GH\ras-commander-hydro\Doc\README_Help.md
==================================================
# RAS Commander Help Documentation

This directory contains help documentation for the RAS Commander Toolbox.

## Files

- **RASCommander_Help.html** - Main help documentation file that displays when users click the help button in ArcGIS Pro

## Help Integration

The help system is integrated into each tool through the `getHelp()` method in each tool class. When users click the help button (?) in the tool dialog:

1. ArcGIS Pro calls the tool's `getHelp()` method
2. The method returns a file:/// URL pointing to the HTML help file
3. The URL includes an anchor (#) to jump to the specific tool's section

## Updating Help

To update the help documentation:

1. Edit `RASCommander_Help.html` 
2. Make sure to maintain the anchor IDs for each section:
   - `#load-hec-ras-2d-geometry-layers`
   - `#load-hec-ras-2d-results-summary-layers`
   - `#load-hec-ras-terrain`

## VRT Limitations Note

The Load HEC-RAS Terrain tool includes important warnings about VRT limitations:
- The tool only loads base terrain VRT files
- Vector terrain modifications from RAS Mapper are NOT included
- This limitation is documented in:
  - The tool's class docstring
  - The tool's description
  - Warning messages during execution
  - The help documentation

## Styling

The HTML help file uses inline CSS for portability. The styling includes:
- Responsive design that works in various browser windows
- Color-coded sections for warnings and notes
- Clear parameter descriptions
- Professional appearance matching ArcGIS Pro's style
==================================================

File: c:\GH\ras-commander-hydro\testdata\Test Data Notes.txt
==================================================
The toolbox is only meant to support 6.x Model Series Results

1D Unsteady Model Default HDF For Unit Tests: BaldEagle.p01.hdf

1D Steady Model Default HDF For Unit Tests: BaldEagle.p02.hdf

2D Unsteady Default HDF For Unit Tests BaldEagleDamBrk.p07.hdf

2D Unsteady with Pipes and Pumps Default HDF For Unit Tests: DavisStormSystem.p02.hdf
==================================================

File: c:\GH\ras-commander-hydro\toolboxes\RAS Commander.LoadHECRAS2DGeometry.pyt.xml
==================================================
<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en">
    <Esri>
        <CreaDate>20250629</CreaDate>
        <CreaTime>10121400</CreaTime>
        <ArcGISFormat>1.0</ArcGISFormat>
        <SyncOnce>TRUE</SyncOnce>
        <ModDate>20250629</ModDate>
        <ModTime>120000</ModTime>
    </Esri>
    <tool name="LoadHECRAS2DGeometry" displayname="Load HEC-RAS 2D Geometry Layers" toolboxalias="RASCommander">
        <summary>Extracts 2D geometry elements from a HEC-RAS HDF file including mesh elements, breaklines, boundary conditions, and pipe networks.</summary>
        <arcToolboxHelpPath>toolboxes\RAS Commander.pyt</arcToolboxHelpPath>
        <parameters>
            <param name="input_hdf" displayname="Geometry or Plan HDF File" datatype="File" direction="Input" expression="input_hdf" type="Required">
                <dialogReference>Select a HEC-RAS geometry file (g*.hdf) or plan file (p*.hdf) containing 2D geometry data.</dialogReference>
            </param>
            <param name="override_crs" displayname="Override CRS (Optional)" datatype="Spatial Reference" direction="Input" expression="override_crs" type="Optional">
                <dialogReference>Specify a coordinate reference system if it cannot be determined from the HEC-RAS project files. The tool will first attempt to read the CRS from the HDF file or associated .prj files.</dialogReference>
            </param>
            <param name="geometry_elements" displayname="Geometry Elements to Load" datatype="String" direction="Input" expression="geometry_elements" type="Required">
                <dialogReference>Select one or more geometry elements to extract from the HDF file. Each selected element will create a separate output feature class.</dialogReference>
            </param>
        </parameters>
    </tool>
    <dataIdInfo>
        <idCitation>
            <resTitle>Load HEC-RAS 2D Geometry Layers</resTitle>
        </idCitation>
        <idAbs>This tool extracts various 2D geometry elements from HEC-RAS geometry (g*.hdf) or plan (p*.hdf) files.

Available geometry elements include:
• 2D Breaklines - Mesh refinement lines with cell spacing attributes
• 2D Boundary Condition Lines - External and internal boundary conditions
• Mesh Area Perimeters - 2D flow area boundaries
• Mesh Cell Centers - Point locations at the center of each mesh cell
• Mesh Cell Faces - Line geometries representing cell edges
• Mesh Cells (Polygons) - Full polygon representation of mesh cells
• Pipe Conduits - Storm/sewer pipe networks (if present)
• Pipe Nodes - Junction points in pipe networks (if present)

Select one or more elements to extract. Each selected element will create a separate feature class.

Note: Mesh cell polygon creation can be time-consuming for large meshes (>100,000 cells).</idAbs>
        <idPurp>To extract and visualize HEC-RAS 2D geometry elements in ArcGIS Pro for analysis and mapping.</idPurp>
        <searchKeys>
            <keyword>HEC-RAS</keyword>
            <keyword>2D Geometry</keyword>
            <keyword>Mesh</keyword>
            <keyword>Breaklines</keyword>
            <keyword>Boundary Conditions</keyword>
            <keyword>Pipe Networks</keyword>
        </searchKeys>
    </dataIdInfo>
</metadata>
==================================================

File: c:\GH\ras-commander-hydro\toolboxes\RAS Commander.LoadHECRAS2DResults.pyt.xml
==================================================
<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en">
    <Esri>
        <CreaDate>20250629</CreaDate>
        <CreaTime>10124400</CreaTime>
        <ArcGISFormat>1.0</ArcGISFormat>
        <SyncOnce>TRUE</SyncOnce>
        <ModDate>20250629</ModDate>
        <ModTime>120000</ModTime>
    </Esri>
    <tool name="LoadHECRAS2DResults" displayname="Load HEC-RAS 2D Results Summary Layers" toolboxalias="RASCommander">
        <summary>Extracts 2D results summary data from a HEC-RAS HDF file including maximum water surface elevation and face velocities.</summary>
        <arcToolboxHelpPath>toolboxes\RAS Commander.pyt</arcToolboxHelpPath>
        <parameters>
            <param name="input_hdf" displayname="Plan HDF File with Results" datatype="File" direction="Input" expression="input_hdf" type="Required">
                <dialogReference>Select a HEC-RAS plan file (p*.hdf) that contains simulation results. Geometry-only files will not contain the required results data.</dialogReference>
            </param>
            <param name="override_crs" displayname="Override CRS (Optional)" datatype="Spatial Reference" direction="Input" expression="override_crs" type="Optional">
                <dialogReference>Specify a coordinate reference system if it cannot be determined from the HEC-RAS project files. The tool will first attempt to read the CRS from the HDF file or associated .prj files.</dialogReference>
            </param>
            <param name="results_elements" displayname="Results to Load" datatype="String" direction="Input" expression="results_elements" type="Required">
                <dialogReference>Select one or more results types to extract from the HDF file. Each selected result will create a separate output feature class.</dialogReference>
            </param>
        </parameters>
    </tool>
    <dataIdInfo>
        <idCitation>
            <resTitle>Load HEC-RAS 2D Results Summary Layers</resTitle>
        </idCitation>
        <idAbs>This tool extracts summary results data from HEC-RAS plan files (p*.hdf) that contain simulation results.

Available results include:
• Max WSE at Cell Centers - Maximum water surface elevation achieved at each cell center during the simulation, with the time of occurrence
• Max Vel at Cell Faces - Maximum velocity achieved at each cell face during the simulation, with the time of occurrence

Both results types create point feature classes with attributes for the maximum value and the time when it occurred.

IMPORTANT: This tool requires a plan HDF file that contains results data. Geometry-only files will not work.</idAbs>
        <idPurp>To extract and visualize HEC-RAS 2D simulation results in ArcGIS Pro for flood analysis and mapping.</idPurp>
        <searchKeys>
            <keyword>HEC-RAS</keyword>
            <keyword>2D Results</keyword>
            <keyword>Water Surface Elevation</keyword>
            <keyword>Velocity</keyword>
            <keyword>Flood Results</keyword>
            <keyword>Maximum Values</keyword>
        </searchKeys>
    </dataIdInfo>
</metadata>

==================================================

File: c:\GH\ras-commander-hydro\toolboxes\RAS Commander.LoadHECRAS6xHDFData.pyt.xml
==================================================
<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en"><Esri><CreaDate>20250628</CreaDate><CreaTime>11374300</CreaTime><ArcGISFormat>1.0</ArcGISFormat><SyncOnce>TRUE</SyncOnce></Esri></metadata>

==================================================

File: c:\GH\ras-commander-hydro\toolboxes\RAS Commander.LoadRASTerrain.pyt.xml
==================================================
<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en">
    <Esri>
        <CreaDate>20250628</CreaDate>
        <CreaTime>14094400</CreaTime>
        <ArcGISFormat>1.0</ArcGISFormat>
        <SyncOnce>TRUE</SyncOnce>
        <ModDate>20250629</ModDate>
        <ModTime>120000</ModTime>
    </Esri>
    <tool name="LoadRASTerrain" displayname="Load HEC-RAS Terrain" toolboxalias="RASCommander">
        <summary>Loads terrain layers defined in a HEC-RAS project's .rasmap file into the current map.</summary>
        <arcToolboxHelpPath>toolboxes\RAS Commander.pyt</arcToolboxHelpPath>
        <parameters>
            <param name="in_ras_project" displayname="HEC-RAS Project File (*.prj)" datatype="File" direction="Input" expression="in_ras_project" type="Required">
                <dialogReference>Select the HEC-RAS project file (*.prj). The tool will automatically find the associated .rasmap file in the same directory.</dialogReference>
            </param>
            <param name="import_all" displayname="Import All Terrains" datatype="Boolean" direction="Input" expression="import_all" type="Optional">
                <dialogReference>Check this box to import all terrain layers found in the project. When checked, the terrain selection list will be disabled.</dialogReference>
            </param>
            <param name="terrains_to_load" displayname="Terrains to Load" datatype="String" direction="Input" expression="terrains_to_load" type="Optional">
                <dialogReference>Select specific terrain layers to load. This list is populated from the terrains found in the .rasmap file. Disabled when 'Import All Terrains' is checked.</dialogReference>
            </param>
        </parameters>
    </tool>
    <dataIdInfo>
        <idCitation>
            <resTitle>Load HEC-RAS Terrain</resTitle>
        </idCitation>
        <idAbs>This tool reads terrain layer definitions from a HEC-RAS project's .rasmap file and loads the associated VRT (Virtual Raster) files into ArcGIS Pro.

IMPORTANT LIMITATIONS:
• This tool loads the underlying terrain TIFFs as a VRT with the priority from HEC-RAS in place
• It does NOT include terrain modifications done as vector terrain modifications in RAS Mapper
• Only the base terrain raster data will be loaded
• If your HEC-RAS model includes vector terrain modifications (breaklines, high ground, etc.), those modifications will not be reflected in the loaded terrain

The tool will:
1. Read the .rasmap file associated with your HEC-RAS project
2. Find all terrain layers defined in the project
3. Load the corresponding VRT files that reference the underlying TIFF files
4. Apply the layer priority as defined in HEC-RAS

Select individual terrains or use "Import All Terrains" to load all available terrain layers.</idAbs>
        <idPurp>To load HEC-RAS terrain layers into ArcGIS Pro for visualization. Note that only base terrain VRT files are loaded - vector terrain modifications from RAS Mapper are NOT included.</idPurp>
        <searchKeys>
            <keyword>HEC-RAS</keyword>
            <keyword>Terrain</keyword>
            <keyword>VRT</keyword>
            <keyword>Raster</keyword>
            <keyword>DEM</keyword>
            <keyword>Elevation</keyword>
        </searchKeys>
    </dataIdInfo>
</metadata>

==================================================

File: c:\GH\ras-commander-hydro\toolboxes\RAS Commander.pyt
==================================================
# -*- coding: utf-8 -*-
#
# RAS Commander.pyt
#
# ArcGIS Python Toolbox for HEC-RAS HDF5 Data Integration
# ===================================================================================
#
# DESCRIPTION:
# This toolbox provides tools for loading and visualizing HEC-RAS 2D geometry and terrain
# data from HDF5 files directly within ArcGIS Pro.
#
# ORIGIN AND ATTRIBUTION:
# This toolbox is a direct port of the HDF5 data extraction logic from the
# ras-commander library. All core HDF5 reading logic is derived from the
# library's HDF handling classes (e.g., HdfMesh, HdfBndry).
#
#   ras-commander library: https://github.com/gpt-cmdr/ras-commander
#
# SPONSORSHIP:
# The development and porting of these tools to the ArcGIS platform
# was generously sponsored by CLB Engineering in cooperation with ESRI.
#
#   CLB Engineering: https://clbengineering.com/
#
# ===================================================================================

import sys
import os

# Add the Scripts directory to the Python path so we can import our modules
toolbox_dir = os.path.dirname(os.path.abspath(__file__))
scripts_dir = os.path.join(os.path.dirname(toolbox_dir), 'Scripts')
if scripts_dir not in sys.path:
    sys.path.insert(0, scripts_dir)

# Import the tool classes from our modules
from ras_commander import LoadRASTerrain, LoadHECRAS2DGeometry, LoadHECRAS2DResults


class Toolbox(object):
    """
    ArcGIS Python Toolbox for loading HEC-RAS 2D geometry and terrain layers.
    """
    def __init__(self):
        self.label = "RAS Commander"
        self.alias = "RASCommander"
        self.description = "Tools for loading HEC-RAS 2D geometry and terrain from HDF5 files. Sponsored by CLB Engineering (https://clbengineering.com/)."
        # List the tool classes
        self.tools = [LoadHECRAS2DGeometry, LoadHECRAS2DResults, LoadRASTerrain]
==================================================

File: c:\GH\ras-commander-hydro\toolboxes\RAS Commander.pyt.xml
==================================================
<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en">
    <Esri>
        <CreaDate>20250628</CreaDate>
        <CreaTime>11363500</CreaTime>
        <ArcGISFormat>1.0</ArcGISFormat>
        <SyncOnce>TRUE</SyncOnce>
        <ModDate>20250629</ModDate>
        <ModTime>120000</ModTime>
    </Esri>
    <toolbox name="RAS Commander" alias="RASCommander">
        <arcToolboxHelpPath>toolboxes\RAS Commander.pyt</arcToolboxHelpPath>
        <toolsets/>
    </toolbox>
    <dataIdInfo>
        <idCitation>
            <resTitle>RAS Commander Toolbox</resTitle>
        </idCitation>
        <idAbs>ArcGIS Python Toolbox for HEC-RAS HDF5 Data Integration. This toolbox provides tools for loading and visualizing HEC-RAS 2D geometry, terrain, and results data from HDF5 files directly within ArcGIS Pro.

The toolbox includes three main tools:
• Load HEC-RAS 2D Geometry Layers - Extract 2D mesh elements, breaklines, boundary conditions, and pipe networks
• Load HEC-RAS 2D Results Summary Layers - Extract maximum water surface elevation and velocity results
• Load HEC-RAS Terrain - Load terrain layers from HEC-RAS project .rasmap files

This toolbox is a direct port of the HDF5 data extraction logic from the ras-commander library (https://github.com/gpt-cmdr/ras-commander). The development and porting of these tools to the ArcGIS platform was generously sponsored by CLB Engineering (https://clbengineering.com/) in cooperation with ESRI.</idAbs>
        <idPurp>To provide seamless integration between HEC-RAS hydraulic modeling software and ArcGIS Pro for visualization and analysis of 2D flood modeling results.</idPurp>
        <searchKeys>
            <keyword>HEC-RAS</keyword>
            <keyword>HDF5</keyword>
            <keyword>2D Hydraulic Modeling</keyword>
            <keyword>Flood Modeling</keyword>
            <keyword>Arc Hydro</keyword>
            <keyword>RAS Commander</keyword>
            <keyword>CLB Engineering</keyword>
        </searchKeys>
        <idCredit>Original ras-commander library: https://github.com/gpt-cmdr/ras-commander
Sponsorship: CLB Engineering (https://clbengineering.com/) in cooperation with ESRI</idCredit>
    </dataIdInfo>
    <distInfo>
        <distributor>
            <distorFormat>
                <formatName>ArcToolbox Toolbox</formatName>
            </distorFormat>
        </distributor>
    </distInfo>
</metadata>
==================================================

File: c:\GH\ras-commander-hydro\Scripts\ras_commander\LoadHECRAS2DGeometry.py
==================================================
# -*- coding: utf-8 -*-
"""
LoadHECRAS2DGeometry.py

Tool for loading HEC-RAS 2D geometry layers from HDF files including mesh elements,
breaklines, boundary conditions, and pipe networks.
"""

import arcpy
import os
import h5py
import numpy as np
from collections import defaultdict

# Import helper functions from utils
from .utils import (
    get_ras_projection_wkt,
    polygonize_arcpy_optimized,
    get_polyline_centroid_vectorized,
    cache_hdf_metadata,
    write_features_to_fc,
    get_dynamic_fields_from_data
)


class LoadHECRAS2DGeometry(object):
    """
    Loads 2D geometry elements from a HEC-RAS HDF file.
    """
    def __init__(self):
        self.label = "Load HEC-RAS 2D Geometry Layers"
        self.description = """Extracts 2D geometry elements from a HEC-RAS HDF file including mesh elements, breaklines, boundary conditions, and pipe networks.
        
        This tool extracts various 2D geometry elements from HEC-RAS geometry (g*.hdf) or plan (p*.hdf) files.
        
        Available geometry elements include:
        • 2D Breaklines - Mesh refinement lines with cell spacing attributes
        • 2D Boundary Condition Lines - External and internal boundary conditions
        • Mesh Area Perimeters - 2D flow area boundaries
        • Mesh Cell Centers - Point locations at the center of each mesh cell
        • Mesh Cell Faces - Line geometries representing cell edges
        • Mesh Cells (Polygons) - Full polygon representation of mesh cells
        • Pipe Conduits - Storm/sewer pipe networks (if present)
        • Pipe Nodes - Junction points in pipe networks (if present)
        
        Note: Mesh cell polygon creation can be time-consuming for large meshes (>100,000 cells)."""
        self.canRunInBackground = False
        
        # Geometry elements
        self.BREAKLINES = "2D Breaklines"
        self.BC_LINES = "2D Boundary Condition Lines"
        self.PERIMETERS = "Mesh Area Perimeters"
        self.CELL_POINTS = "Mesh Cell Centers"
        self.CELL_FACES = "Mesh Cell Faces"
        self.CELL_POLYS = "Mesh Cells (Polygons)"
        
        # Pipe network elements
        self.PIPE_CONDUITS = "Pipe Conduits"
        self.PIPE_NODES = "Pipe Nodes"
        self.PIPE_NETWORKS = "Pipe Networks"
        
        # Cache for HDF metadata
        self._hdf_cache = {}

    def getParameterInfo(self):
        geometry_elements = [self.BREAKLINES, self.BC_LINES, self.PERIMETERS, self.CELL_POINTS, 
                           self.CELL_FACES, self.CELL_POLYS, self.PIPE_CONDUITS, self.PIPE_NODES, self.PIPE_NETWORKS]

        params = [
            arcpy.Parameter(displayName="Geometry or Plan HDF File", name="input_hdf", datatype="DEFile", 
                          parameterType="Required", direction="Input"),
            arcpy.Parameter(displayName="Override CRS (Optional)", name="override_crs", datatype="GPSpatialReference", 
                          parameterType="Optional", direction="Input"),
            
            # Geometry elements to load
            arcpy.Parameter(displayName="Geometry Elements to Load", name="geometry_elements", datatype="GPString", 
                          parameterType="Required", direction="Input", multiValue=True),
            
            # Output parameters
            arcpy.Parameter(displayName="Output 2D Breaklines", name="output_breaklines", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output 2D Boundary Condition Lines", name="output_bc_lines", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output Mesh Area Perimeters", name="output_perimeters", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output Mesh Cell Centers", name="output_cell_points", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output Mesh Cell Faces", name="output_cell_faces", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output Mesh Cells (Polygons)", name="output_cell_polys", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output Pipe Conduits", name="output_pipe_conduits", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output Pipe Nodes", name="output_pipe_nodes", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs"),
            arcpy.Parameter(displayName="Output Pipe Networks", name="output_pipe_networks", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output", category="Outputs")
        ]
        
        # Configure HDF file filter
        params[0].filter.list = ["hdf", "g*.hdf", "p*.hdf"]
        params[0].description = "Select a HEC-RAS geometry file (g*.hdf) or plan file (p*.hdf) containing 2D geometry data."
        
        params[1].description = """Specify a coordinate reference system if it cannot be determined from the HEC-RAS project files. 
        The tool will first attempt to read the CRS from the HDF file or associated .prj files."""
        
        # Set filters for multi-value parameters
        params[2].filter.type = "ValueList"
        params[2].filter.list = geometry_elements
        params[2].value = [self.PERIMETERS]  # Default selection
        params[2].description = """Select one or more geometry elements to extract from the HDF file. 
        Each selected element will create a separate output feature class."""
        
        # Set default output paths and descriptions
        params[3].value = r"memory\Breaklines"
        params[3].description = "Output feature class for 2D breaklines with cell spacing attributes."
        
        params[4].value = r"memory\BoundaryConditionLines"
        params[4].description = "Output feature class for 2D boundary condition lines."
        
        params[5].value = r"memory\MeshPerimeters"
        params[5].description = "Output feature class for 2D flow area perimeter polygons."
        
        params[6].value = r"memory\MeshCellCenters"
        params[6].description = "Output feature class for mesh cell center points."
        
        params[7].value = r"memory\MeshCellFaces"
        params[7].description = "Output feature class for mesh cell face polylines."
        
        params[8].value = r"memory\MeshCellPolygons"
        params[8].description = "Output feature class for mesh cell polygons. Note: Can be slow for large meshes."
        
        params[9].value = r"memory\PipeConduits"
        params[9].description = "Output feature class for pipe conduits (storm/sewer networks)."
        
        params[10].value = r"memory\PipeNodes"
        params[10].description = "Output feature class for pipe junction nodes."
        
        params[11].value = r"memory\PipeNetworks"
        params[11].description = "Output feature class for pipe network elements."
        
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal validation."""
        # Enable/disable output parameters based on selected elements
        if parameters[2].value:
            selected = parameters[2].valueAsText.split(';') if parameters[2].valueAsText else []
            
            # Enable/disable outputs based on selection
            parameters[3].enabled = self.BREAKLINES in selected
            parameters[4].enabled = self.BC_LINES in selected
            parameters[5].enabled = self.PERIMETERS in selected
            parameters[6].enabled = self.CELL_POINTS in selected
            parameters[7].enabled = self.CELL_FACES in selected
            parameters[8].enabled = self.CELL_POLYS in selected
            parameters[9].enabled = self.PIPE_CONDUITS in selected
            parameters[10].enabled = self.PIPE_NODES in selected
            parameters[11].enabled = self.PIPE_NETWORKS in selected
        return
    
    def updateMessages(self, parameters):
        """Modify messages created by internal validation."""
        # Add warning for large mesh polygon creation
        if parameters[2].value and self.CELL_POLYS in str(parameters[2].value):
            parameters[8].setWarningMessage(
                "Creating cell polygons can be time-consuming for large meshes (>100,000 cells). "
                "Consider using cell centers or faces for visualization instead."
            )
        return

    # --- HDF Data Extraction Methods ---

    def _get_breaklines_direct(self, hdf_file, sr):
        """Extracts 2D breaklines from HDF file with optimized numpy operations."""
        try:
            breaklines_path = "Geometry/2D Flow Area Break Lines"
            if breaklines_path not in hdf_file:
                return [], []
            
            bl_line_data = hdf_file[breaklines_path]
            attributes = bl_line_data["Attributes"][()]
            polyline_info = bl_line_data["Polyline Info"][()]
            polyline_points = bl_line_data["Polyline Points"][()]
            
            # Vectorized filtering of valid breaklines
            valid_mask = polyline_info[:, 1] >= 2  # pnt_cnt >= 2
            valid_indices = np.where(valid_mask)[0]
            
            valid_data, geometries = [], []
            
            for idx in valid_indices:
                pnt_start, pnt_cnt, part_start, part_cnt = polyline_info[idx]
                attr_row = attributes[idx]
                
                name = attr_row["Name"]
                name = name.decode('utf-8', 'ignore').strip() if isinstance(name, bytes) else str(name)
                
                try:
                    # Extract points efficiently
                    points = polyline_points[pnt_start:pnt_start + pnt_cnt]
                    
                    if part_cnt == 1:
                        # Single part - direct creation
                        arcpy_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in points])
                        geom = arcpy.Polyline(arcpy_array, sr)
                    else:
                        # Multi-part polyline
                        parts = bl_line_data["Polyline Parts"][()][part_start:part_start + part_cnt]
                        all_parts_array = arcpy.Array()
                        
                        for part_pnt_start, part_pnt_cnt in parts:
                            if part_pnt_cnt > 1:
                                part_points = points[part_pnt_start:part_pnt_start + part_pnt_cnt]
                                part_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in part_points])
                                all_parts_array.add(part_array)
                        
                        if all_parts_array.count == 0:
                            continue
                        geom = arcpy.Polyline(all_parts_array, sr)
                    
                    valid_data.append({
                        'bl_id': int(idx),
                        'Name': name,
                        'CellSpaceNear': float(attr_row["Cell Spacing Near"]),
                        'CellSpaceFar': float(attr_row["Cell Spacing Far"]),
                        'NearRepeats': int(attr_row["Near Repeats"]),
                        'ProtectRadius': int(attr_row["Protection Radius"])
                    })
                    geometries.append(geom)
                    
                except Exception as e:
                    arcpy.AddWarning(f"Error processing breakline {idx}: {str(e)}")
                    continue
            
            return valid_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Breaklines): {e}")
            raise arcpy.ExecuteError("Failed to read breaklines from HDF file")

    def _get_bc_lines_direct(self, hdf_file, sr):
        """Extracts 2D boundary condition lines from HDF file."""
        try:
            bc_lines_path = "Geometry/Boundary Condition Lines"
            if bc_lines_path not in hdf_file:
                return [], []
            
            # Get boundary condition line data
            bc_attrs = hdf_file[f"{bc_lines_path}/Attributes"][()]
            polyline_info = hdf_file[f"{bc_lines_path}/Polyline Info"][()]
            polyline_points = hdf_file[f"{bc_lines_path}/Polyline Points"][()]
            
            # Check if multi-part data exists
            has_parts = f"{bc_lines_path}/Polyline Parts" in hdf_file
            if has_parts:
                polyline_parts = hdf_file[f"{bc_lines_path}/Polyline Parts"][()]
            
            # Vectorized filtering of valid boundary condition lines
            valid_mask = polyline_info[:, 1] >= 2  # pnt_cnt >= 2
            valid_indices = np.where(valid_mask)[0]
            
            valid_data, geometries = [], []
            
            for idx in valid_indices:
                pnt_start, pnt_cnt, part_start, part_cnt = polyline_info[idx]
                attr_row = bc_attrs[idx]
                
                # Extract attributes
                name = attr_row["Name"]
                name = name.decode('utf-8', 'ignore').strip() if isinstance(name, bytes) else str(name)
                
                bc_type = attr_row["Type"]
                bc_type = bc_type.decode('utf-8', 'ignore').strip() if isinstance(bc_type, bytes) else str(bc_type)
                
                try:
                    # Extract points efficiently
                    points = polyline_points[pnt_start:pnt_start + pnt_cnt]
                    
                    if part_cnt == 1 or not has_parts:
                        # Single part - direct creation
                        arcpy_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in points])
                        geom = arcpy.Polyline(arcpy_array, sr)
                    else:
                        # Multi-part polyline
                        parts = polyline_parts[part_start:part_start + part_cnt]
                        all_parts_array = arcpy.Array()
                        
                        for part_pnt_start, part_pnt_cnt in parts:
                            if part_pnt_cnt > 1:
                                part_points = points[part_pnt_start:part_pnt_start + part_pnt_cnt]
                                part_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in part_points])
                                all_parts_array.add(part_array)
                        
                        if all_parts_array.count == 0:
                            continue
                        geom = arcpy.Polyline(all_parts_array, sr)
                    
                    valid_data.append({
                        'bc_id': int(idx),
                        'Name': name,
                        'Type': bc_type
                    })
                    geometries.append(geom)
                    
                except Exception as e:
                    arcpy.AddWarning(f"Error processing boundary condition line {idx}: {str(e)}")
                    continue
            
            return valid_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Boundary Condition Lines): {e}")
            raise arcpy.ExecuteError("Failed to read boundary condition lines from HDF file")

    def _get_pipe_conduits_direct(self, hdf_file, sr):
        """Extracts pipe conduits from HDF file with dynamic attributes."""
        try:
            conduits_path = "Geometry/Pipe Conduits"
            if conduits_path not in hdf_file:
                return [], []
            
            conduits_group = hdf_file[conduits_path]
            
            # Get attributes
            if 'Attributes' not in conduits_group:
                return [], []
            
            attributes = conduits_group['Attributes'][()]
            
            # Get polyline geometry data
            if 'Polyline Info' not in conduits_group or 'Polyline Points' not in conduits_group:
                return [], []
            
            polyline_info = conduits_group['Polyline Info'][()]
            polyline_points = conduits_group['Polyline Points'][()]
            
            valid_data, geometries = [], []
            
            # Debug: Show original field names
            if len(attributes) > 0:
                arcpy.AddMessage(f"DEBUG: Original HDF field names: {list(attributes.dtype.names)}")
            
            # Process each conduit
            for idx, (info, attr_row) in enumerate(zip(polyline_info, attributes)):
                point_start_idx, point_count = info[0], info[1]
                
                if point_count < 2:
                    continue
                
                try:
                    # Extract points for this conduit
                    coords = polyline_points[point_start_idx:point_start_idx + point_count]
                    
                    # Create polyline geometry
                    arcpy_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in coords])
                    geom = arcpy.Polyline(arcpy_array, sr)
                    
                    # Build attribute dictionary dynamically
                    attr_dict = {'conduit_id': int(idx)}
                    
                    # Process all attribute fields
                    attr_names = attributes.dtype.names
                    for field_name in attr_names:
                        value = attr_row[field_name]
                        
                        # Decode bytes to string if necessary
                        if isinstance(value, (bytes, np.bytes_)):
                            value = value.decode('utf-8', 'ignore').strip()
                        elif isinstance(value, np.ndarray) and value.dtype.kind == 'S':
                            value = value.tobytes().decode('utf-8', 'ignore').strip()
                        
                        # Clean field name for ArcGIS compatibility
                        clean_name = field_name.replace(' ', '_').replace(':', '_').replace(';', '_').replace(',', '_').replace('(', '_').replace(')', '_').replace("'", '')
                        
                        # Fix known typos in HDF field names
                        if 'Condtui_Connections' in clean_name:
                            clean_name = clean_name.replace('Condtui_Connections', 'Conduit_Connections')
                            if idx == 0:  # Only log for first record
                                arcpy.AddMessage(f"DEBUG: Fixed typo in field name 'Condtui_Connections' to 'Conduit_Connections'")
                        
                        # Special handling for exact "Shape" field (case insensitive)
                        if field_name.upper() == 'SHAPE':
                            clean_name = 'Shape_Type'
                            if idx == 0:
                                arcpy.AddMessage(f"DEBUG: Renamed 'Shape' field to 'Shape_Type' to avoid system field conflict")
                        # Rename other fields that conflict with system fields
                        elif clean_name.upper() in ['OBJECTID', 'SHAPE', 'SHAPE_LENGTH', 'SHAPE_AREA', 'SHAPE_LENG']:
                            original_clean = clean_name
                            clean_name = f"{clean_name}_USER"
                            if idx == 0:  # Only log for first record to avoid spam
                                arcpy.AddMessage(f"DEBUG: Renamed system field '{original_clean}' to '{clean_name}'")
                            
                        attr_dict[clean_name] = value
                    
                    valid_data.append(attr_dict)
                    geometries.append(geom)
                    
                except Exception as e:
                    arcpy.AddWarning(f"Error processing pipe conduit {idx}: {str(e)}")
                    continue
            
            # Debug: Show cleaned field names from first record
            if valid_data:
                arcpy.AddMessage(f"DEBUG: Cleaned field names: {list(valid_data[0].keys())}")
            
            return valid_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Pipe Conduits): {e}")
            raise arcpy.ExecuteError("Failed to read pipe conduits from HDF file")

    def _get_pipe_nodes_direct(self, hdf_file, sr):
        """Extracts pipe nodes from HDF file with dynamic attributes."""
        try:
            nodes_path = "Geometry/Pipe Nodes"
            if nodes_path not in hdf_file:
                return [], []
            
            nodes_group = hdf_file[nodes_path]
            
            # Get attributes
            if 'Attributes' not in nodes_group:
                return [], []
            
            attributes = nodes_group['Attributes'][()]
            
            # Get points data
            if 'Points' not in nodes_group:
                return [], []
            
            points = nodes_group['Points'][()]
            
            valid_data, geometries = [], []
            
            # Debug: Show original field names
            if len(attributes) > 0:
                arcpy.AddMessage(f"DEBUG: Original HDF field names: {list(attributes.dtype.names)}")
            
            # Process each node
            for idx, (xy, attr_row) in enumerate(zip(points, attributes)):
                if len(xy) < 2:
                    continue
                
                try:
                    # Create point geometry
                    geom = arcpy.PointGeometry(arcpy.Point(xy[0], xy[1]), sr)
                    
                    # Build attribute dictionary dynamically
                    attr_dict = {'node_id': int(idx)}
                    
                    # Process all attribute fields
                    attr_names = attributes.dtype.names
                    for field_name in attr_names:
                        value = attr_row[field_name]
                        
                        # Decode bytes to string if necessary
                        if isinstance(value, (bytes, np.bytes_)):
                            value = value.decode('utf-8', 'ignore').strip()
                        elif isinstance(value, np.ndarray) and value.dtype.kind == 'S':
                            value = value.tobytes().decode('utf-8', 'ignore').strip()
                        
                        # Clean field name for ArcGIS compatibility
                        clean_name = field_name.replace(' ', '_').replace(':', '_').replace(';', '_').replace(',', '_').replace('(', '_').replace(')', '_').replace("'", '')
                        
                        # Fix known typos in HDF field names
                        if 'Condtui_Connections' in clean_name:
                            clean_name = clean_name.replace('Condtui_Connections', 'Conduit_Connections')
                            if idx == 0:  # Only log for first record
                                arcpy.AddMessage(f"DEBUG: Fixed typo in field name 'Condtui_Connections' to 'Conduit_Connections'")
                        
                        # Special handling for exact "Shape" field (case insensitive)
                        if field_name.upper() == 'SHAPE':
                            clean_name = 'Shape_Type'
                            if idx == 0:
                                arcpy.AddMessage(f"DEBUG: Renamed 'Shape' field to 'Shape_Type' to avoid system field conflict")
                        # Rename other fields that conflict with system fields
                        elif clean_name.upper() in ['OBJECTID', 'SHAPE', 'SHAPE_LENGTH', 'SHAPE_AREA', 'SHAPE_LENG']:
                            original_clean = clean_name
                            clean_name = f"{clean_name}_USER"
                            if idx == 0:  # Only log for first record to avoid spam
                                arcpy.AddMessage(f"DEBUG: Renamed system field '{original_clean}' to '{clean_name}'")
                            
                        attr_dict[clean_name] = value
                    
                    valid_data.append(attr_dict)
                    geometries.append(geom)
                    
                except Exception as e:
                    arcpy.AddWarning(f"Error processing pipe node {idx}: {str(e)}")
                    continue
            
            # Debug: Show cleaned field names from first record
            if valid_data:
                arcpy.AddMessage(f"DEBUG: Cleaned field names: {list(valid_data[0].keys())}")
            
            return valid_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Pipe Nodes): {e}")
            raise arcpy.ExecuteError("Failed to read pipe nodes from HDF file")

    def _get_mesh_areas_direct(self, hdf_file, sr):
        """Extracts mesh area perimeters from HDF file."""
        try:
            if not self._hdf_cache['mesh_names']:
                return [], []
            
            raw_data = [{'mesh_name': name} for name in self._hdf_cache['mesh_names']]
            geometries = []
            
            flow_areas_path = "Geometry/2D Flow Areas"
            for mesh_name in self._hdf_cache['mesh_names']:
                perimeter_path = f"{flow_areas_path}/{mesh_name}/Perimeter"
                if perimeter_path in hdf_file:
                    coords = hdf_file[perimeter_path][()]
                    # Create polygon directly from numpy array
                    arcpy_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in coords])
                    geometries.append(arcpy.Polygon(arcpy_array, sr))
                else:
                    geometries.append(None)
            
            return raw_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Perimeters): {e}")
            raise arcpy.ExecuteError()

    def _get_mesh_cell_points_direct(self, hdf_file, sr):
        """Extracts mesh cell centers using vectorized operations."""
        try:
            if not self._hdf_cache['mesh_names']:
                return [], []
            
            raw_data, geometries = [], []
            
            for mesh_name in self._hdf_cache['mesh_names']:
                cell_centers_path = f"Geometry/2D Flow Areas/{mesh_name}/Cells Center Coordinate"
                if cell_centers_path not in hdf_file:
                    arcpy.AddWarning(f"No cell center data found for mesh '{mesh_name}'")
                    continue
                
                # Read all cell centers at once
                cell_centers = hdf_file[cell_centers_path][()]
                num_cells = len(cell_centers)
                
                # Vectorized data creation
                mesh_data = [{'mesh_name': mesh_name, 'cell_id': i} for i in range(num_cells)]
                raw_data.extend(mesh_data)
                
                # Batch create point geometries
                mesh_geometries = [arcpy.PointGeometry(arcpy.Point(coords[0], coords[1]), sr) 
                                 for coords in cell_centers]
                geometries.extend(mesh_geometries)
            
            return raw_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Cell Points): {e}")
            raise arcpy.ExecuteError()

    def _get_mesh_cell_faces_direct(self, hdf_file, sr):
        """Extracts mesh cell faces with optimized coordinate handling."""
        try:
            if not self._hdf_cache['mesh_names']:
                return [], []
            
            raw_data, geometries = [], []
            
            for mesh_name in self._hdf_cache['mesh_names']:
                try:
                    base = f"Geometry/2D Flow Areas/{mesh_name}"
                    
                    # Load all data at once
                    facepoints_index = hdf_file[f"{base}/Faces FacePoint Indexes"][()]
                    facepoints_coords = hdf_file[f"{base}/FacePoints Coordinate"][()]
                    faces_perim_info = hdf_file[f"{base}/Faces Perimeter Info"][()]
                    faces_perim_values = hdf_file[f"{base}/Faces Perimeter Values"][()]
                    
                    # Process faces in batches
                    for face_id, ((p_a, p_b), (s_row, count)) in enumerate(
                        zip(facepoints_index, faces_perim_info)):
                        
                        # Build coordinate array efficiently
                        if count > 0:
                            coords = np.vstack([
                                facepoints_coords[p_a:p_a+1],
                                faces_perim_values[s_row:s_row + count],
                                facepoints_coords[p_b:p_b+1]
                            ])
                        else:
                            coords = np.vstack([
                                facepoints_coords[p_a:p_a+1],
                                facepoints_coords[p_b:p_b+1]
                            ])
                        
                        # Create polyline
                        arcpy_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in coords])
                        geometries.append(arcpy.Polyline(arcpy_array, sr))
                        raw_data.append({'mesh_name': mesh_name, 'face_id': face_id})
                    
                except KeyError:
                    arcpy.AddWarning(f"No face data for mesh '{mesh_name}'.")
            
            return raw_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Cell Faces): {e}")
            raise arcpy.ExecuteError()

    def _get_mesh_cells_direct(self, hdf_file, sr, precomputed_faces, messages):
        """
        Optimized mesh cell extraction using numpy arrays and pre-computed lookups.
        """
        try:
            messages.addMessage("Starting optimized cell polygon creation...")
            
            if not self._hdf_cache['mesh_names']:
                return [], []
            
            # Build optimized face lookup with numpy arrays
            face_lookup = {}
            face_arrays = {}  # Store face coordinates as numpy arrays
            
            for i, (face_attr, face_geom) in enumerate(zip(precomputed_faces[0], precomputed_faces[1])):
                mesh_name = face_attr['mesh_name']
                face_id = face_attr['face_id']
                
                if mesh_name not in face_lookup:
                    face_lookup[mesh_name] = {}
                    face_arrays[mesh_name] = {}
                
                face_lookup[mesh_name][face_id] = face_geom
                
                # Store coordinates as numpy array for faster access
                if face_geom and hasattr(face_geom, 'getPart'):
                    part = face_geom.getPart(0)
                    coords = np.array([[part.getObject(i).X, part.getObject(i).Y]
                                     for i in range(part.count) if part.getObject(i)])
                    if len(coords) > 0:
                        face_arrays[mesh_name][face_id] = coords
            
            raw_data, geometries = [], []
            total_cells_processed = 0
            
            for mesh_name in self._hdf_cache['mesh_names']:
                messages.addMessage(f"\nProcessing mesh '{mesh_name}'...")
                
                try:
                    base = f"Geometry/2D Flow Areas/{mesh_name}"
                    
                    # Load cell-face relationships
                    cell_face_info = hdf_file[f"{base}/Cells Face and Orientation Info"][()]
                    cell_face_values = hdf_file[f"{base}/Cells Face and Orientation Values"][()]
                    
                    # Extract as numpy arrays for efficiency
                    face_indices = cell_face_values[:, 0].astype(np.int32)
                    orientations = cell_face_values[:, 1].astype(np.int32)
                    
                    mesh_faces = face_lookup.get(mesh_name, {})
                    mesh_face_arrays = face_arrays.get(mesh_name, {})
                    
                    num_cells = len(cell_face_info)
                    cells_created = 0
                    
                    # Process in batches for progress reporting
                    batch_size = 5000
                    
                    for batch_start in range(0, num_cells, batch_size):
                        batch_end = min(batch_start + batch_size, num_cells)
                        batch_created = 0
                        
                        for cell_id in range(batch_start, batch_end):
                            start, length = cell_face_info[cell_id]
                            
                            if length < 3:  # Need at least 3 faces
                                continue
                            
                            # Get face indices for this cell
                            cell_face_ids = face_indices[start:start + length]
                            cell_orientations = orientations[start:start + length]
                            
                            # Collect face geometries
                            face_geoms = []
                            
                            for j, (face_id, orientation) in enumerate(zip(cell_face_ids, cell_orientations)):
                                if face_id in mesh_faces:
                                    face_geom = mesh_faces[face_id]
                                    
                                    # Handle orientation
                                    if orientation < 0 and face_id in mesh_face_arrays:
                                        # Create reversed geometry using numpy array
                                        coords = mesh_face_arrays[face_id][::-1]
                                        arcpy_array = arcpy.Array([arcpy.Point(x, y) for x, y in coords])
                                        face_geom = arcpy.Polyline(arcpy_array, sr)
                                    
                                    if face_geom:
                                        face_geoms.append(face_geom)
                            
                            if len(face_geoms) >= 3:
                                # Use optimized polygon construction
                                polygon = polygonize_arcpy_optimized(face_geoms, sr)
                                
                                if polygon and polygon.area > 0:
                                    raw_data.append({'mesh_name': mesh_name, 'cell_id': cell_id})
                                    geometries.append(polygon)
                                    cells_created += 1
                                    batch_created += 1
                                    total_cells_processed += 1
                        
                        # Progress update
                        if batch_end % 10000 == 0 or batch_end == num_cells:
                            messages.addMessage(
                                f"  Processed {batch_end}/{num_cells} cells in mesh '{mesh_name}' "
                                f"({cells_created} valid polygons)"
                            )
                    
                    messages.addMessage(
                        f"  Completed mesh '{mesh_name}': {cells_created} cells created"
                    )
                    
                except Exception as e:
                    messages.addErrorMessage(f"Error processing mesh '{mesh_name}': {str(e)}")
                    continue
            
            messages.addMessage(f"\nTotal cells processed: {total_cells_processed}")
            return raw_data, geometries
            
        except Exception as e:
            messages.addErrorMessage(f"Fatal error in cell creation: {str(e)}")
            raise arcpy.ExecuteError()

    # --- Main Execution Logic ---
    def execute(self, parameters, messages):
        hdf_path = parameters[0].valueAsText
        
        # Get selected elements
        geometry_elements = parameters[2].values if parameters[2].values else []
        
        if not geometry_elements:
            messages.addErrorMessage("No geometry elements selected for loading. Please select at least one element.")
            raise arcpy.ExecuteError
        
        # Get projection
        proj_wkt = get_ras_projection_wkt(hdf_path)
        sr = None
        if proj_wkt:
            sr = arcpy.SpatialReference()
            sr.loadFromString(proj_wkt)
            messages.addMessage(f"CRS '{sr.name}' found in HEC-RAS project files.")
        elif parameters[1].value:
            sr = parameters[1].value
            messages.addMessage(f"Using user-defined override CRS: {sr.name}")
        else:
            messages.addErrorMessage("CRS could not be determined. Please use the Override CRS parameter.")
            raise arcpy.ExecuteError
        
        # Open HDF file once and cache metadata
        with h5py.File(hdf_path, 'r') as hdf_file:
            messages.addMessage("Caching HDF metadata...")
            self._hdf_cache = cache_hdf_metadata(hdf_file)
            
            # Pre-compute faces if needed
            precomputed_faces = None
            if (self.CELL_FACES in geometry_elements or 
                self.CELL_POLYS in geometry_elements):
                messages.addMessage("Pre-loading Mesh Cell Faces...")
                precomputed_faces = self._get_mesh_cell_faces_direct(hdf_file, sr)
            
            # Process geometry elements
            if self.BREAKLINES in geometry_elements and parameters[3].valueAsText:
                output_fc = parameters[3].valueAsText
                data, geoms = self._get_breaklines_direct(hdf_file, sr)
                fields = [("bl_id", "LONG"), ("Name", "TEXT"), ("CellSpaceNear", "FLOAT"), 
                         ("CellSpaceFar", "FLOAT"), ("NearRepeats", "LONG"), ("ProtectRadius", "LONG")]
                write_features_to_fc(output_fc, sr, "POLYLINE", fields, data, geoms, messages)
            
            if self.BC_LINES in geometry_elements and parameters[4].valueAsText:
                output_fc = parameters[4].valueAsText
                data, geoms = self._get_bc_lines_direct(hdf_file, sr)
                fields = [("bc_id", "LONG"), ("Name", "TEXT"), ("Type", "TEXT")]
                write_features_to_fc(output_fc, sr, "POLYLINE", fields, data, geoms, messages)
            
            if self.PERIMETERS in geometry_elements and parameters[5].valueAsText:
                output_fc = parameters[5].valueAsText
                data, geoms = self._get_mesh_areas_direct(hdf_file, sr)
                fields = [("mesh_name", "TEXT")]
                write_features_to_fc(output_fc, sr, "POLYGON", fields, data, geoms, messages)
            
            if self.CELL_POINTS in geometry_elements and parameters[6].valueAsText:
                output_fc = parameters[6].valueAsText
                data, geoms = self._get_mesh_cell_points_direct(hdf_file, sr)
                fields = [("mesh_name", "TEXT"), ("cell_id", "LONG")]
                write_features_to_fc(output_fc, sr, "POINT", fields, data, geoms, messages)
            
            if self.CELL_FACES in geometry_elements and parameters[7].valueAsText:
                output_fc = parameters[7].valueAsText
                if precomputed_faces:
                    data, geoms = precomputed_faces
                    fields = [("mesh_name", "TEXT"), ("face_id", "LONG")]
                    write_features_to_fc(output_fc, sr, "POLYLINE", fields, data, geoms, messages)
            
            if self.CELL_POLYS in geometry_elements and parameters[8].valueAsText:
                output_fc = parameters[8].valueAsText
                if precomputed_faces:
                    messages.addMessage("Constructing cell polygons from faces...")
                    data, geoms = self._get_mesh_cells_direct(hdf_file, sr, precomputed_faces, messages)
                    fields = [("mesh_name", "TEXT"), ("cell_id", "LONG")]
                    write_features_to_fc(output_fc, sr, "POLYGON", fields, data, geoms, messages)
            
            # Process pipe network elements
            if self.PIPE_CONDUITS in geometry_elements and parameters[9].valueAsText:
                output_fc = parameters[9].valueAsText
                messages.addMessage("Extracting Pipe Conduits...")
                data, geoms = self._get_pipe_conduits_direct(hdf_file, sr)
                if data:
                    # Get dynamic fields from the data
                    fields = get_dynamic_fields_from_data(data)
                    write_features_to_fc(output_fc, sr, "POLYLINE", fields, data, geoms, messages)
                else:
                    messages.addWarning("No pipe conduits found in the HDF file.")
            
            if self.PIPE_NODES in geometry_elements and parameters[10].valueAsText:
                output_fc = parameters[10].valueAsText
                messages.addMessage("Extracting Pipe Nodes...")
                data, geoms = self._get_pipe_nodes_direct(hdf_file, sr)
                if data:
                    # Get dynamic fields from the data
                    fields = get_dynamic_fields_from_data(data)
                    write_features_to_fc(output_fc, sr, "POINT", fields, data, geoms, messages)
                else:
                    messages.addWarning("No pipe nodes found in the HDF file.")
        
        messages.addMessage("\nProcessing complete.")
        return
    
    def getHelp(self, tool_name):
        """Return help documentation URL for the tool."""
        help_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                                "Doc", "RASCommander_Help.html")
        if os.path.exists(help_file):
            return f"file:///{help_file.replace(os.sep, '/')}#load-hec-ras-2d-geometry-layers"
        return None
==================================================

File: c:\GH\ras-commander-hydro\Scripts\ras_commander\LoadHECRAS2DResults.py
==================================================
# -*- coding: utf-8 -*-
"""
LoadHECRAS2DResults.py

Tool for loading HEC-RAS 2D results summary layers from HDF files including
maximum water surface elevation and face velocities.
"""

import arcpy
import os
import h5py
import numpy as np
from datetime import datetime, timedelta

# Import helper functions from utils
from .utils import (
    get_ras_projection_wkt,
    get_polyline_centroid_vectorized,
    cache_hdf_metadata,
    write_features_to_fc
)


class LoadHECRAS2DResults(object):
    """
    Loads 2D results summary data from a HEC-RAS HDF file.
    """
    def __init__(self):
        self.label = "Load HEC-RAS 2D Results Summary Layers"
        self.description = """Extracts 2D results summary data from a HEC-RAS HDF file including maximum water surface elevation and face velocities.
        
        This tool extracts summary results data from HEC-RAS plan files (p*.hdf) that contain simulation results.
        
        Available results include:
        • Max WSE at Cell Centers - Maximum water surface elevation achieved at each cell center during the simulation, with the time of occurrence
        • Max Vel at Cell Faces - Maximum velocity achieved at each cell face during the simulation, with the time of occurrence
        
        Both results types create point feature classes with attributes for the maximum value and the time when it occurred.
        
        Note: This tool requires a plan HDF file that contains results data. Geometry-only files will not work."""
        self.canRunInBackground = False
        
        # Results elements
        self.MAX_WSE_POINTS = "Max WSE at Cell Centers"
        self.MAX_FACE_VEL_POINTS = "Max Vel at Cell Faces"
        
        # Cache for HDF metadata
        self._hdf_cache = {}

    def getParameterInfo(self):
        results_elements = [self.MAX_WSE_POINTS, self.MAX_FACE_VEL_POINTS]

        params = [
            arcpy.Parameter(displayName="Plan HDF File with Results", name="input_hdf", datatype="DEFile", 
                          parameterType="Required", direction="Input"),
            arcpy.Parameter(displayName="Override CRS (Optional)", name="override_crs", datatype="GPSpatialReference", 
                          parameterType="Optional", direction="Input"),
            
            # Results elements to load
            arcpy.Parameter(displayName="Results to Load", name="results_elements", datatype="GPString", 
                          parameterType="Required", direction="Input", multiValue=True),
            
            # Output parameters
            arcpy.Parameter(displayName="Output Max WSE at Cell Centers", name="output_max_wse", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output"),
            arcpy.Parameter(displayName="Output Max Vel at Cell Faces", name="output_max_face_vel", datatype="DEFeatureClass", 
                          parameterType="Optional", direction="Output")
        ]
        
        # Configure HDF file filter
        params[0].filter.list = ["hdf", "p*.hdf"]
        params[0].description = """Select a HEC-RAS plan file (p*.hdf) that contains simulation results. 
        Geometry-only files will not contain the required results data."""
        
        params[1].description = """Specify a coordinate reference system if it cannot be determined from the HEC-RAS project files. 
        The tool will first attempt to read the CRS from the HDF file or associated .prj files."""
        
        # Set filters for multi-value parameters
        params[2].filter.type = "ValueList"
        params[2].filter.list = results_elements
        params[2].value = [self.MAX_WSE_POINTS]  # Default selection
        params[2].description = """Select one or more results types to extract from the HDF file. 
        Each selected result will create a separate output feature class."""
        
        # Set default output paths and descriptions
        params[3].value = r"memory\MaximumWSE"
        params[3].description = """Output feature class for maximum water surface elevation points. 
        Includes attributes for cell ID, mesh name, maximum WSE value, and time of occurrence."""
        
        params[4].value = r"memory\MaximumFaceVelocity"
        params[4].description = """Output feature class for maximum face velocity points. 
        Includes attributes for face ID, mesh name, maximum velocity value, and time of occurrence."""
        
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal validation."""
        # Enable/disable output parameters based on selected elements
        if parameters[2].value:
            selected = parameters[2].valueAsText.split(';') if parameters[2].valueAsText else []
            
            # Enable/disable outputs based on selection
            parameters[3].enabled = self.MAX_WSE_POINTS in selected
            parameters[4].enabled = self.MAX_FACE_VEL_POINTS in selected
        return
    
    def updateMessages(self, parameters):
        """Modify messages created by internal validation."""
        # Check if HDF file is plan file with results
        if parameters[0].value:
            hdf_path = parameters[0].valueAsText
            if hdf_path and os.path.basename(hdf_path).lower().startswith('g'):
                parameters[0].setWarningMessage(
                    "This appears to be a geometry file (g*.hdf). Results data is typically in plan files (p*.hdf)."
                )
        return

    # --- HDF Data Extraction Methods ---

    def _get_max_wse_points_direct(self, hdf_file, sr):
        """Extracts maximum water surface elevation points with vectorized operations."""
        try:
            if not self._hdf_cache['has_results']:
                arcpy.AddError("No results data found in HDF file.")
                return [], []
            
            raw_data, geometries = [], []
            start_time = self._hdf_cache['simulation_start_time']
            
            arcpy.AddMessage(f'Simulation start time: {start_time}')
            
            for mesh_name in self._hdf_cache['mesh_names']:
                arcpy.AddMessage(f'Processing max WSE for mesh: {mesh_name}')
                
                # Get cell centers
                centers_path = f"Geometry/2D Flow Areas/{mesh_name}/Cells Center Coordinate"
                if centers_path not in hdf_file:
                    arcpy.AddWarning(f"No cell centers found for mesh '{mesh_name}'. Skipping.")
                    continue
                
                cell_centers = hdf_file[centers_path][()]
                
                # Get maximum water surface data
                summary_path = f"Results/Unsteady/Output/Output Blocks/Base Output/Summary Output/2D Flow Areas/{mesh_name}/Maximum Water Surface"
                if summary_path not in hdf_file:
                    arcpy.AddWarning(f"No 'Maximum Water Surface' data for mesh '{mesh_name}'. Skipping.")
                    continue
                
                max_wse_data = hdf_file[summary_path][:]
                
                # Data is 2D array: row 0 = values, row 1 = times (in days)
                if max_wse_data.ndim == 2 and max_wse_data.shape[0] == 2:
                    wse_values = max_wse_data[0, :]
                    time_in_days = max_wse_data[1, :]
                else:
                    arcpy.AddWarning(f"Unexpected data format for mesh '{mesh_name}'. Skipping.")
                    continue
                
                num_cells = min(len(cell_centers), len(wse_values))
                
                # Vectorized time conversion
                time_deltas = np.array([timedelta(days=float(t)) for t in time_in_days[:num_cells]])
                times_of_max = [start_time + td for td in time_deltas]
                
                # Create data and geometries in batches
                mesh_data = [{
                    'mesh_name': mesh_name,
                    'cell_id': i,
                    'max_wse': float(wse_values[i]),
                    'max_wse_time': times_of_max[i]
                } for i in range(num_cells)]
                
                mesh_geometries = [
                    arcpy.PointGeometry(arcpy.Point(cell_centers[i][0], cell_centers[i][1]), sr)
                    for i in range(num_cells)
                ]
                
                raw_data.extend(mesh_data)
                geometries.extend(mesh_geometries)
            
            return raw_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Max WSE Points): {e}")
            raise arcpy.ExecuteError()

    def _get_mesh_cell_faces_direct(self, hdf_file, sr):
        """Extracts mesh cell faces needed for face velocity calculation."""
        try:
            if not self._hdf_cache['mesh_names']:
                return [], []
            
            raw_data, geometries = [], []
            
            for mesh_name in self._hdf_cache['mesh_names']:
                try:
                    base = f"Geometry/2D Flow Areas/{mesh_name}"
                    
                    # Load all data at once
                    facepoints_index = hdf_file[f"{base}/Faces FacePoint Indexes"][()]
                    facepoints_coords = hdf_file[f"{base}/FacePoints Coordinate"][()]
                    faces_perim_info = hdf_file[f"{base}/Faces Perimeter Info"][()]
                    faces_perim_values = hdf_file[f"{base}/Faces Perimeter Values"][()]
                    
                    # Process faces in batches
                    for face_id, ((p_a, p_b), (s_row, count)) in enumerate(
                        zip(facepoints_index, faces_perim_info)):
                        
                        # Build coordinate array efficiently
                        if count > 0:
                            coords = np.vstack([
                                facepoints_coords[p_a:p_a+1],
                                faces_perim_values[s_row:s_row + count],
                                facepoints_coords[p_b:p_b+1]
                            ])
                        else:
                            coords = np.vstack([
                                facepoints_coords[p_a:p_a+1],
                                facepoints_coords[p_b:p_b+1]
                            ])
                        
                        # Create polyline
                        arcpy_array = arcpy.Array([arcpy.Point(p[0], p[1]) for p in coords])
                        geometries.append(arcpy.Polyline(arcpy_array, sr))
                        raw_data.append({'mesh_name': mesh_name, 'face_id': face_id})
                    
                except KeyError:
                    arcpy.AddWarning(f"No face data for mesh '{mesh_name}'.")
            
            return raw_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Cell Faces): {e}")
            raise arcpy.ExecuteError()

    def _get_max_face_velocity_points_direct(self, hdf_file, sr):
        """Extracts maximum face velocity points with optimized centroid calculation."""
        try:
            if not self._hdf_cache['has_results']:
                arcpy.AddError("No results data found in HDF file.")
                return [], []
            
            raw_data, geometries = [], []
            start_time = self._hdf_cache['simulation_start_time']
            
            arcpy.AddMessage(f'Simulation start time: {start_time}')
            
            # Get face geometries
            face_data, face_geoms = self._get_mesh_cell_faces_direct(hdf_file, sr)
            
            # Build lookup
            face_lookup = {}
            for i, (face_attr, face_geom) in enumerate(zip(face_data, face_geoms)):
                mesh_name = face_attr['mesh_name']
                face_id = face_attr['face_id']
                
                if mesh_name not in face_lookup:
                    face_lookup[mesh_name] = {}
                
                face_lookup[mesh_name][face_id] = face_geom
            
            for mesh_name in self._hdf_cache['mesh_names']:
                arcpy.AddMessage(f'Processing max face velocity for mesh: {mesh_name}')
                
                # Get maximum face velocity data
                summary_path = f"Results/Unsteady/Output/Output Blocks/Base Output/Summary Output/2D Flow Areas/{mesh_name}/Maximum Face Velocity"
                if summary_path not in hdf_file:
                    arcpy.AddWarning(f"No 'Maximum Face Velocity' data for mesh '{mesh_name}'. Skipping.")
                    continue
                
                max_vel_data = hdf_file[summary_path][:]
                
                # Data is 2D array: row 0 = values, row 1 = times (in days)
                if max_vel_data.ndim == 2 and max_vel_data.shape[0] == 2:
                    vel_values = max_vel_data[0, :]
                    time_in_days = max_vel_data[1, :]
                else:
                    arcpy.AddWarning(f"Unexpected data format for mesh '{mesh_name}'. Skipping.")
                    continue
                
                # Process faces
                mesh_faces = face_lookup.get(mesh_name, {})
                
                for face_id in range(len(vel_values)):
                    if face_id not in mesh_faces:
                        continue
                    
                    face_geom = mesh_faces[face_id]
                    if not face_geom:
                        continue
                    
                    # Calculate centroid using optimized function
                    centroid_pt = get_polyline_centroid_vectorized(face_geom)
                    if not centroid_pt:
                        continue
                    
                    # Convert time
                    time_of_max = start_time + timedelta(days=float(time_in_days[face_id]))
                    
                    raw_data.append({
                        'mesh_name': mesh_name,
                        'face_id': face_id,
                        'max_vel': float(vel_values[face_id]),
                        'time_of_max': time_of_max
                    })
                    
                    geometries.append(arcpy.PointGeometry(centroid_pt, sr))
            
            return raw_data, geometries
            
        except Exception as e:
            arcpy.AddError(f"HDF Read Error (Max Face Velocity Points): {e}")
            raise arcpy.ExecuteError()

    # --- Main Execution Logic ---
    def execute(self, parameters, messages):
        hdf_path = parameters[0].valueAsText
        
        # Get selected elements
        results_elements = parameters[2].values if parameters[2].values else []
        
        if not results_elements:
            messages.addErrorMessage("No results elements selected for loading. Please select at least one element.")
            raise arcpy.ExecuteError
        
        # Get projection
        proj_wkt = get_ras_projection_wkt(hdf_path)
        sr = None
        if proj_wkt:
            sr = arcpy.SpatialReference()
            sr.loadFromString(proj_wkt)
            messages.addMessage(f"CRS '{sr.name}' found in HEC-RAS project files.")
        elif parameters[1].value:
            sr = parameters[1].value
            messages.addMessage(f"Using user-defined override CRS: {sr.name}")
        else:
            messages.addErrorMessage("CRS could not be determined. Please use the Override CRS parameter.")
            raise arcpy.ExecuteError
        
        # Open HDF file once and cache metadata
        with h5py.File(hdf_path, 'r') as hdf_file:
            messages.addMessage("Caching HDF metadata...")
            self._hdf_cache = cache_hdf_metadata(hdf_file)
            
            # Check if results exist
            if not self._hdf_cache['has_results']:
                messages.addErrorMessage("No results data found in the HDF file. Please ensure this is a plan HDF file with results.")
                raise arcpy.ExecuteError
            
            # Process results elements
            if self.MAX_WSE_POINTS in results_elements and parameters[3].valueAsText:
                output_fc = parameters[3].valueAsText
                messages.addMessage("Extracting Maximum Water Surface Elevation points...")
                data, geoms = self._get_max_wse_points_direct(hdf_file, sr)
                fields = [("mesh_name", "TEXT"), ("cell_id", "LONG"), ("max_wse", "DOUBLE"), 
                         ("max_wse_time", "DATE")]
                write_features_to_fc(output_fc, sr, "POINT", fields, data, geoms, messages)
            
            if self.MAX_FACE_VEL_POINTS in results_elements and parameters[4].valueAsText:
                output_fc = parameters[4].valueAsText
                messages.addMessage("Extracting Maximum Face Velocity points...")
                data, geoms = self._get_max_face_velocity_points_direct(hdf_file, sr)
                fields = [("mesh_name", "TEXT"), ("face_id", "LONG"), ("max_vel", "DOUBLE"), 
                         ("time_of_max", "DATE")]
                write_features_to_fc(output_fc, sr, "POINT", fields, data, geoms, messages)
        
        messages.addMessage("\nProcessing complete.")
        return
    
    def getHelp(self, tool_name):
        """Return help documentation URL for the tool."""
        help_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                                "Doc", "RASCommander_Help.html")
        if os.path.exists(help_file):
            return f"file:///{help_file.replace(os.sep, '/')}#load-hec-ras-2d-results-summary-layers"
        return None
==================================================

File: c:\GH\ras-commander-hydro\Scripts\ras_commander\LoadRASTerrain.py
==================================================
# -*- coding: utf-8 -*-
"""
LoadRASTerrain.py

Tool for loading HEC-RAS terrain layers from a project's rasmap file.
"""

import arcpy
import os
import xml.etree.ElementTree as ET
from pathlib import Path


class LoadRASTerrain(object):
    """
    Loads one or more HEC-RAS terrain layers from a project's rasmap file.
    
    IMPORTANT: This tool loads the underlying terrain TIFFs as a VRT (Virtual Raster) 
    with the priority from HEC-RAS in place. It does NOT include terrain modifications 
    done as vector terrain modifications in RAS Mapper. Only the base terrain raster 
    data will be loaded.
    """
    def __init__(self):
        self.label = "Load HEC-RAS Terrain"
        self.description = """Loads terrain layers defined in a HEC-RAS project's .rasmap file into the current map.
        
        IMPORTANT: This tool only loads the underlying terrain TIFFs as VRT files. It does NOT include 
        vector terrain modifications (breaklines, high ground, etc.) made in RAS Mapper."""
        self.canRunInBackground = False
        self._terrain_cache = {}

    def getParameterInfo(self):
        params = [
            arcpy.Parameter(
                displayName="HEC-RAS Project File (*.prj)",
                name="in_ras_project",
                datatype="DEFile",
                parameterType="Required",
                direction="Input"
            ),
            arcpy.Parameter(
                displayName="Import All Terrains",
                name="import_all",
                datatype="GPBoolean",
                parameterType="Optional",
                direction="Input"
            ),
            arcpy.Parameter(
                displayName="Terrains to Load",
                name="terrains_to_load",
                datatype="GPString",
                parameterType="Optional",
                direction="Input",
                multiValue=True
            )
        ]
        
        params[0].filter.list = ["prj"]
        params[0].description = """Select the HEC-RAS project file (*.prj). 
        The tool will automatically find the associated .rasmap file in the same directory."""
        
        params[1].value = False
        params[1].description = """Check this box to import all terrain layers found in the project. 
        When checked, the terrain selection list will be disabled."""
        
        params[2].filter.type = "ValueList"
        params[2].description = """Select specific terrain layers to load. 
        This list is populated from the terrains found in the .rasmap file. 
        Disabled when 'Import All Terrains' is checked."""
        
        return params
    
    def updateMessages(self, parameters):
        """Modify the messages created by internal parameter validation."""
        if parameters[0].value:
            # Add a warning about VRT limitations
            parameters[0].setWarningMessage(
                "Note: This tool loads base terrain VRT files only. Vector terrain modifications "
                "(breaklines, high ground, etc.) made in RAS Mapper will NOT be included."
            )
        
        # Add additional warning if terrains are selected
        if parameters[2].value or parameters[1].value:
            if not parameters[0].hasWarning():
                parameters[0].setWarningMessage(
                    "Note: This tool loads base terrain VRT files only. Vector terrain modifications "
                    "(breaklines, high ground, etc.) made in RAS Mapper will NOT be included."
                )
        return

    def isLicensed(self):
        return True

    def _get_rasmap_path_from_prj(self, prj_path_str):
        """Finds the .rasmap file associated with a .prj file."""
        if not prj_path_str or not os.path.exists(prj_path_str):
            return None
        
        p = Path(prj_path_str)
        rasmap_path = p.with_suffix('.rasmap')
        
        if rasmap_path.exists():
            return str(rasmap_path)
        
        arcpy.AddWarning(f"Could not find associated .rasmap file for {p.name}")
        return None

    def _get_terrain_info_from_rasmap(self, rasmap_path_str):
        """Parses a .rasmap file to get terrain names and their HDF file paths."""
        if not rasmap_path_str or not os.path.exists(rasmap_path_str):
            return {}
            
        terrains = {}
        try:
            tree = ET.parse(rasmap_path_str)
            root = tree.getroot()
            project_folder = os.path.dirname(rasmap_path_str)
            
            for layer in root.findall(".//Terrains/Layer"):
                name = layer.get('Name')
                filename_rel = layer.get('Filename')
                
                if name and filename_rel:
                    # HEC-RAS paths can start with '.\', remove it for robust joining
                    clean_rel_path = filename_rel.lstrip('.\\/')
                    filename_abs = os.path.join(project_folder, clean_rel_path)
                    terrains[name] = os.path.normpath(filename_abs)
                    
        except ET.ParseError as e:
            arcpy.AddWarning(f"Error parsing .rasmap file {os.path.basename(rasmap_path_str)}: {e}")
        except Exception as e:
            arcpy.AddWarning(f"An unexpected error occurred while reading the .rasmap file: {e}")
            
        return terrains

    def updateParameters(self, parameters):
        """Modify the parameters on the GUI according to user input."""
        if parameters[0].value and parameters[0].altered:
            prj_path = parameters[0].valueAsText
            rasmap_path = self._get_rasmap_path_from_prj(prj_path)
            
            if rasmap_path:
                self._terrain_cache = self._get_terrain_info_from_rasmap(rasmap_path)
                terrain_names = list(self._terrain_cache.keys())
                parameters[2].filter.list = sorted(terrain_names)
            else:
                parameters[2].filter.list = []
                self._terrain_cache = {}

        if parameters[1].value is True:
            parameters[2].enabled = False
            parameters[2].value = None # Clear selection if "Import All" is checked
        else:
            parameters[2].enabled = True
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        prj_path = parameters[0].valueAsText
        import_all = parameters[1].value
        selected_terrains = parameters[2].values

        if not self._terrain_cache:
            rasmap_path = self._get_rasmap_path_from_prj(prj_path)
            if rasmap_path:
                self._terrain_cache = self._get_terrain_info_from_rasmap(rasmap_path)

        if not self._terrain_cache:
            messages.addErrorMessage("No terrains found or .rasmap file could not be read. Aborting.")
            return

        terrains_to_load = []
        if import_all:
            terrains_to_load = list(self._terrain_cache.keys())
            messages.addMessage("Import All selected. Loading all available terrains...")
        elif selected_terrains:
            terrains_to_load = selected_terrains
            messages.addMessage(f"Loading selected terrains: {', '.join(terrains_to_load)}")
        else:
            messages.addErrorMessage("No terrains selected for loading.")
            return
            
        try:
            aprx = arcpy.mp.ArcGISProject("CURRENT")
            # Ensure there is an active map
            if not aprx.activeMap:
                 messages.addErrorMessage("No active map found. Please open a map view and try again.")
                 return
            map = aprx.activeMap
        except Exception as e:
            messages.addErrorMessage(f"Could not access the current ArcGIS Pro project or map: {e}")
            return
            
        layers_added = 0
        for terrain_name in terrains_to_load:
            hdf_path_str = self._terrain_cache.get(terrain_name)
            if not hdf_path_str:
                messages.addWarningMessage(f"Could not find path for terrain '{terrain_name}'. Skipping.")
                continue
            
            p = Path(hdf_path_str)
            vrt_path = str(p.with_suffix('.vrt'))
            
            if os.path.exists(vrt_path):
                try:
                    map.addDataFromPath(vrt_path)
                    messages.addMessage(f"Successfully added terrain layer: {terrain_name}")
                    layers_added += 1
                except Exception as e:
                    messages.addWarningMessage(f"Failed to add layer for '{terrain_name}' from path {vrt_path}: {e}")
            else:
                messages.addWarningMessage(f"Associated VRT file not found for terrain '{terrain_name}'. Expected at: {vrt_path}")
        
        messages.addMessage(f"\nProcessing complete. Added {layers_added} terrain layer(s).")
        
        # Add reminder about VRT limitations
        if layers_added > 0:
            messages.addWarningMessage(
                "\nReminder: The loaded terrain layers are base VRT files only. "
                "Any vector terrain modifications (breaklines, high ground, etc.) made in RAS Mapper "
                "are NOT included in these layers."
            )
        return
    
    def getHelp(self, tool_name):
        """Return help documentation URL for the tool."""
        help_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                                "Doc", "RASCommander_Help.html")
        if os.path.exists(help_file):
            return f"file:///{help_file.replace(os.sep, '/')}#load-hec-ras-terrain"
        return None
==================================================

File: c:\GH\ras-commander-hydro\Scripts\ras_commander\utils.py
==================================================
# -*- coding: utf-8 -*-
"""
utils.py

Shared utility functions for RAS Commander tools.
These helpers use arcpy.Add* functions because they don't have access
to the `messages` object from the tool's `execute` method.
"""

import arcpy
import os
import re
import h5py
import numpy as np
from collections import defaultdict


def get_ras_projection_wkt(hdf_path_str: str) -> str or None:
    """
    Gets projection WKT from HDF file or an associated .prj file.
    This is a self-contained port of the HdfBase.get_projection function
    from the ras-commander library.
    """
    hdf_path = os.path.abspath(hdf_path_str)
    project_folder = os.path.dirname(hdf_path)
    wkt = None
    try:
        with h5py.File(hdf_path, 'r') as hdf_file:
            proj_wkt_attr = hdf_file.attrs.get("Projection")
            if proj_wkt_attr:
                if isinstance(proj_wkt_attr, (bytes, np.bytes_)):
                    wkt = proj_wkt_attr.decode("utf-8")
                    arcpy.AddMessage(f"Found projection in HDF file: {os.path.basename(hdf_path)}")
                    return wkt
    except Exception as e:
        arcpy.AddWarning(f"Could not read projection from HDF file attribute: {e}")
    if not wkt:
        try:
            rasmap_files = [f for f in os.listdir(project_folder) if f.lower().endswith(".rasmap")]
            if rasmap_files:
                rasmap_file_path = os.path.join(project_folder, rasmap_files[0])
                with open(rasmap_file_path, 'r', errors='ignore') as f:
                    content = f.read()
                proj_match = re.search(r'<RASProjectionFilename Filename="(.*?)"', content)
                if proj_match:
                    prj_filename = proj_match.group(1).replace('.\\', '')
                    proj_file = os.path.join(project_folder, prj_filename)
                    if os.path.exists(proj_file):
                        with open(proj_file, 'r') as f_prj:
                            wkt = f_prj.read().strip()
                            arcpy.AddMessage(f"Found projection in associated RASMapper file: {os.path.basename(proj_file)}")
                            return wkt
        except Exception as e:
            arcpy.AddWarning(f"Could not read projection from RASMapper file: {e}")
    return None


def polygonize_arcpy_optimized(line_geometries, sr):
    """
    Optimized polygon creation from line geometries using numpy arrays.
    """
    if not line_geometries:
        return None
    
    try:
        # Pre-process edges into numpy arrays for efficiency
        edge_coords = []
        edge_connections = defaultdict(list)
        tolerance = 1e-9
        
        # Extract all edge coordinates at once
        for line_idx, line in enumerate(line_geometries):
            if line is None or (hasattr(line, 'length') and line.length == 0):
                continue
            
            # Get line coordinates as numpy array
            part = line.getPart(0)
            if part.count >= 2:
                coords = np.array([[part.getObject(i).X, part.getObject(i).Y] 
                                 for i in range(part.count) if part.getObject(i)])
                
                if len(coords) >= 2:
                    edge_coords.append(coords)
                    
                    # Store connections using rounded coordinates for tolerance
                    start_key = tuple(np.round(coords[0], decimals=9))
                    end_key = tuple(np.round(coords[-1], decimals=9))
                    
                    edge_connections[start_key].append((end_key, line_idx, False))
                    edge_connections[end_key].append((start_key, line_idx, True))
        
        if not edge_coords:
            return None
        
        # Find starting point with exactly 2 connections (ideal for tracing)
        start_point = None
        for pt, connections in edge_connections.items():
            if len(connections) == 2:
                start_point = pt
                break
        
        if start_point is None:
            start_point = next(iter(edge_connections))
        
        # Trace polygon using optimized lookup
        visited = set()
        ring_coords = [start_point]
        current = start_point
        
        max_edges = len(edge_coords)
        edge_count = 0
        
        while edge_count < max_edges:
            found_next = False
            
            for next_point, edge_idx, is_reversed in edge_connections[current]:
                edge_key = (edge_idx, is_reversed)
                
                if edge_key not in visited:
                    visited.add(edge_key)
                    visited.add((edge_idx, not is_reversed))
                    
                    # Get edge coordinates
                    coords = edge_coords[edge_idx]
                    if is_reversed:
                        coords = coords[::-1]
                    
                    # Add intermediate points
                    if len(coords) > 2:
                        ring_coords.extend([tuple(c) for c in coords[1:-1]])
                    
                    ring_coords.append(next_point)
                    current = next_point
                    found_next = True
                    edge_count += 1
                    
                    # Check if closed
                    if current == start_point and len(ring_coords) > 3:
                        ring_coords = ring_coords[:-1]  # Remove duplicate
                        
                        # Convert to numpy array for efficient operations
                        ring_array = np.array(ring_coords)
                        
                        # Ensure clockwise orientation
                        if not is_clockwise_numpy(ring_array):
                            ring_array = ring_array[::-1]
                        
                        # Create polygon
                        arcpy_array = arcpy.Array([arcpy.Point(x, y) for x, y in ring_array])
                        return arcpy.Polygon(arcpy_array, sr)
                    break
            
            if not found_next:
                break
        
        # If trace failed, try to create from unique points
        if len(ring_coords) >= 3:
            # Remove duplicates while preserving order
            seen = set()
            unique_coords = []
            for coord in ring_coords:
                if coord not in seen:
                    seen.add(coord)
                    unique_coords.append(coord)
            
            if len(unique_coords) >= 3:
                ring_array = np.array(unique_coords)
                
                if not is_clockwise_numpy(ring_array):
                    ring_array = ring_array[::-1]
                
                arcpy_array = arcpy.Array([arcpy.Point(x, y) for x, y in ring_array])
                return arcpy.Polygon(arcpy_array, sr)
        
        return None
        
    except Exception as e:
        arcpy.AddWarning(f"Polygon construction failed: {e}")
        return None


def is_clockwise_numpy(coords):
    """Check if polygon coordinates are in clockwise order using numpy."""
    coords = np.asarray(coords)
    x = coords[:, 0]
    y = coords[:, 1]
    
    # Vectorized shoelace formula
    area = 0.5 * np.sum(x[:-1] * y[1:] - x[1:] * y[:-1])
    area += 0.5 * (x[-1] * y[0] - x[0] * y[-1])
    
    return area < 0


def get_polyline_centroid_vectorized(polyline):
    """Calculate centroid of polyline using vectorized operations."""
    try:
        part = polyline.getPart(0)
        coords = np.array([[part.getObject(i).X, part.getObject(i).Y] 
                          for i in range(part.count) if part.getObject(i)])
        
        if len(coords) < 2:
            return None
        
        # Vectorized segment calculations
        segments = coords[1:] - coords[:-1]
        lengths = np.sqrt(np.sum(segments**2, axis=1))
        
        # Segment midpoints
        midpoints = (coords[:-1] + coords[1:]) / 2.0
        
        # Weighted centroid
        total_length = np.sum(lengths)
        if total_length > 0:
            weighted_coords = np.sum(midpoints * lengths[:, np.newaxis], axis=0) / total_length
            return arcpy.Point(weighted_coords[0], weighted_coords[1])
        
        return None
        
    except Exception as e:
        arcpy.AddWarning(f"Error calculating centroid: {e}")
        return None


def cache_hdf_metadata(hdf_file):
    """Pre-cache HDF metadata for faster access."""
    hdf_cache = {
        'mesh_names': [],
        'mesh_metadata': {},
        'has_results': False,
        'simulation_start_time': None
    }
    
    # Get mesh names
    flow_areas_path = "Geometry/2D Flow Areas"
    if flow_areas_path in hdf_file and "Attributes" in hdf_file[flow_areas_path]:
        attributes = hdf_file[f"{flow_areas_path}/Attributes"][()]
        hdf_cache['mesh_names'] = [n.decode('utf-8', 'ignore').strip() 
                                       for n in attributes["Name"]]
        
        # Cache mesh metadata
        for mesh_name in hdf_cache['mesh_names']:
            base_path = f"{flow_areas_path}/{mesh_name}"
            metadata = {}
            
            # Cache dataset sizes
            if f"{base_path}/Cells Center Coordinate" in hdf_file:
                metadata['cell_count'] = len(hdf_file[f"{base_path}/Cells Center Coordinate"])
            
            if f"{base_path}/Faces FacePoint Indexes" in hdf_file:
                metadata['face_count'] = len(hdf_file[f"{base_path}/Faces FacePoint Indexes"])
            
            hdf_cache['mesh_metadata'][mesh_name] = metadata
    
    # Check for boundary condition lines
    bc_lines_path = "Geometry/Boundary Condition Lines"
    if bc_lines_path in hdf_file:
        hdf_cache['has_bc_lines'] = True
        hdf_cache['bc_lines_count'] = len(hdf_file[f"{bc_lines_path}/Attributes"][()])
    else:
        hdf_cache['has_bc_lines'] = False
    
    # Check for pipe network elements
    pipe_conduits_path = "Geometry/Pipe Conduits"
    if pipe_conduits_path in hdf_file:
        hdf_cache['has_pipe_conduits'] = True
        if 'Attributes' in hdf_file[pipe_conduits_path]:
            hdf_cache['pipe_conduits_count'] = len(
                hdf_file[f"{pipe_conduits_path}/Attributes"][()]
            )
    else:
        hdf_cache['has_pipe_conduits'] = False
        
    pipe_nodes_path = "Geometry/Pipe Nodes"
    if pipe_nodes_path in hdf_file:
        hdf_cache['has_pipe_nodes'] = True
        if 'Attributes' in hdf_file[pipe_nodes_path]:
            hdf_cache['pipe_nodes_count'] = len(
                hdf_file[f"{pipe_nodes_path}/Attributes"][()]
            )
    else:
        hdf_cache['has_pipe_nodes'] = False
    
    # Check for results and get simulation time
    plan_info = hdf_file.get("Plan Data/Plan Information")
    if plan_info and 'Simulation Start Time' in plan_info.attrs:
        from datetime import datetime
        time_str = plan_info.attrs['Simulation Start Time']
        hdf_cache['simulation_start_time'] = datetime.strptime(
            time_str.decode('utf-8'), "%d%b%Y %H:%M:%S"
        )
        hdf_cache['has_results'] = True
    
    return hdf_cache


def get_dynamic_fields_from_data(data_list):
    """Determines field definitions from dynamic attribute data."""
    if not data_list:
        return []
    
    # Get all unique field names and their types
    field_info = {}
    field_lengths = {}  # Track max length for text fields
    
    for record in data_list:
        for field_name, value in record.items():
            # Skip None or NaN values for type detection
            if value is None or (isinstance(value, (float, np.floating)) and np.isnan(value)):
                continue
                
            if field_name not in field_info:
                # Determine field type based on value
                if isinstance(value, (bool, np.bool_)):
                    field_info[field_name] = "SHORT"  # Use SHORT for boolean
                elif isinstance(value, (int, np.integer)):
                    field_info[field_name] = "LONG"
                elif isinstance(value, (float, np.floating)):
                    field_info[field_name] = "DOUBLE"
                else:
                    field_info[field_name] = "TEXT"
                    field_lengths[field_name] = 0
            
            # Track max length for text fields
            if field_info.get(field_name) == "TEXT" and value is not None:
                str_value = str(value)
                field_lengths[field_name] = max(field_lengths.get(field_name, 0), len(str_value))
    
    # Check for fields that might have been skipped due to all NaN values
    all_field_names = set()
    for record in data_list:
        all_field_names.update(record.keys())
    
    # Add any missing fields with default type
    for field_name in all_field_names:
        if field_name not in field_info:
            # Default to DOUBLE for numeric-sounding fields, TEXT otherwise
            if any(keyword in field_name.lower() for keyword in ['elevation', 'area', 'length', 'coefficient', 'offset']):
                field_info[field_name] = "DOUBLE"
            else:
                field_info[field_name] = "TEXT"
                field_lengths[field_name] = 50
    
    # Convert to list of tuples for field creation
    fields = []
    for name, ftype in field_info.items():
        if ftype == "TEXT":
            # Ensure minimum field length of 50, max 255
            length = min(max(field_lengths.get(name, 50), 50), 255)
            fields.append((name, ftype, length))
        else:
            fields.append((name, ftype))
    
    return fields


def write_features_to_fc(output_fc, sr, geom_type, fields, data, geometries, messages):
    """Optimized feature writing with batch operations."""
    total_features = len(geometries)
    if total_features == 0:
        messages.addWarningMessage(f"No features found for {os.path.basename(output_fc)}. Layer will not be created.")
        return

    messages.addMessage(f"Creating feature class: {os.path.basename(output_fc)} ({total_features} features)")
    
    try:
        output_path, output_name = os.path.split(output_fc)
        if arcpy.Exists(output_fc):
            arcpy.management.Delete(output_fc)
        arcpy.management.CreateFeatureclass(output_path, output_name, geom_type, spatial_reference=sr)
        
        field_names = []
        for field_def in fields:
            field_name = field_def[0]
            field_type = field_def[1]
            
            if field_type == "DATE":
                arcpy.management.AddField(output_fc, field_name, "DATE")
            elif field_type == "TEXT" and len(field_def) > 2:
                # Use the calculated field length for text fields
                field_length = field_def[2]
                arcpy.management.AddField(output_fc, field_name, field_type, field_length=field_length)
            else:
                arcpy.management.AddField(output_fc, field_name, field_type)
            field_names.append(field_name)
            
    except Exception as e:
        messages.addErrorMessage(f"Failed to create output feature class {output_fc}: {e}")
        return
    
    try:
        field_names_with_shape = ["SHAPE@"] + field_names
        features_inserted = 0
        
        # Prepare all rows at once
        all_rows = []
        missing_fields_warned = set()  # Track which fields we've already warned about
        
        for i, geom in enumerate(geometries):
            if geom is None or geom.pointCount == 0:
                continue
            
            row_data = data[i]
            row_values = []
            for name in field_names:
                # Use the exact field name from the data, accounting for any cleanup
                value = row_data.get(name)
                if value is None and name not in row_data:
                    # Only warn once per field across all rows
                    if name not in missing_fields_warned:
                        messages.addWarning(f"Field '{name}' not found in data. Available fields: {list(row_data.keys())}")
                        missing_fields_warned.add(name)
                    value = None  # Use None for missing fields
                
                # Handle special numpy types and NaN values
                if value is not None:
                    # Convert numpy NaN to None for proper NULL handling
                    if isinstance(value, (float, np.floating)) and np.isnan(value):
                        value = None
                    # Convert numpy types to Python types
                    elif isinstance(value, np.integer):
                        value = int(value)
                    elif isinstance(value, np.floating):
                        value = float(value)
                    elif isinstance(value, np.bool_):
                        value = int(value)  # Convert bool to 0/1 for SHORT field
                
                row_values.append(value)
            all_rows.append([geom] + row_values)
        
        # Batch insert with larger chunks
        batch_size = 10000
        with arcpy.da.InsertCursor(output_fc, field_names_with_shape) as cursor:
            for i in range(0, len(all_rows), batch_size):
                batch = all_rows[i:i + batch_size]
                for row in batch:
                    cursor.insertRow(row)
                features_inserted += len(batch)
                
                if features_inserted % 50000 == 0:
                    messages.addMessage(f"  Inserted {features_inserted}/{len(all_rows)} features...")
        
        messages.addMessage(f"Successfully created {os.path.basename(output_fc)} with {features_inserted} features.")
        
    except Exception as e:
        # If the error is about a missing field, show more diagnostic info
        if "Cannot find field" in str(e) or "not found in data" in str(e):
            messages.addErrorMessage(f"Field mapping error for {output_fc}:")
            messages.addErrorMessage(f"  Expected fields: {field_names}")
            if all_rows and len(all_rows) > 0:
                sample_data = data[0] if data else {}
                messages.addErrorMessage(f"  Available fields in data: {list(sample_data.keys())}")
            messages.addErrorMessage(f"  Original error: {e}")
        else:
            messages.addErrorMessage(f"Failed during feature creation for {output_fc}: {e}")
==================================================

File: c:\GH\ras-commander-hydro\Scripts\ras_commander\__init__.py
==================================================
# -*- coding: utf-8 -*-
"""
RAS Commander tools package.

This package contains the tools for loading HEC-RAS data into ArcGIS Pro.
"""

from .LoadRASTerrain import LoadRASTerrain
from .LoadHECRAS2DGeometry import LoadHECRAS2DGeometry
from .LoadHECRAS2DResults import LoadHECRAS2DResults

__all__ = ['LoadRASTerrain', 'LoadHECRAS2DGeometry', 'LoadHECRAS2DResults']
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\BoundaryConditionLines.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/BoundaryConditionLines.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "Boundary Condition Lines",
      "uRI" : "CIMPATH=Map/BoundaryConditionLines.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Boundary Condition Lines",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "Name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "BoundaryConditionLines",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature.Name",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Line",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "MinimizeLabels",
            "constrainOffset" : "AboveLine",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : false
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetStraightFromLine",
            "maximumLabelOverrun" : 16,
            "maximumLabelOverrunUnit" : "Point",
            "measureFromClippedFeatureGeometry" : true,
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerFeature",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Map",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMLineSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMSolidStroke",
                "enable" : true,
                "capStyle" : "Round",
                "joinStyle" : "Round",
                "lineStyle3D" : "Strip",
                "miterLimit" : 10,
                "width" : 2,
                "height3D" : 1,
                "anchor3D" : "Center",
                "color" : {
                  "type" : "CIMRGBColor",
                  "values" : [
                    0,
                    112,
                    255,
                    100
                  ]
                }
              }
            ]
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\Breaklines.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/Breaklines.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "Breaklines",
      "uRI" : "CIMPATH=Map/Breaklines.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Breaklines",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "Name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "Breaklines",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature.Name",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Line",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "MinimizeLabels",
            "constrainOffset" : "AboveLine",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : false
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetStraightFromLine",
            "maximumLabelOverrun" : 16,
            "maximumLabelOverrunUnit" : "Point",
            "measureFromClippedFeatureGeometry" : true,
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerFeature",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Map",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMLineSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMSolidStroke",
                "enable" : true,
                "capStyle" : "Round",
                "joinStyle" : "Round",
                "lineStyle3D" : "Strip",
                "miterLimit" : 10,
                "width" : 2,
                "height3D" : 1,
                "anchor3D" : "Center",
                "color" : {
                  "type" : "CIMRGBColor",
                  "values" : [
                    173.40000000000001,
                    87.739999999999995,
                    74.560000000000002,
                    100
                  ]
                }
              }
            ]
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\MaximumFaceVelocity.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/MaximumFaceVelocity.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "MaximumFaceVelocity",
      "uRI" : "CIMPATH=Map/MaximumFaceVelocity.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "MaximumFaceVelocity",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : false,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "MaximumFaceVelocity",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Point",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "Unambiguous",
            "constrainOffset" : "NoConstraint",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "enablePointPlacementPriorities" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : true
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetCurvedFromLine",
            "maximumLabelOverrun" : 36,
            "maximumLabelOverrunUnit" : "Point",
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerPart",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Percentage",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMClassBreaksRenderer",
        "barrierWeight" : "High",
        "classBreakType" : "GraduatedColor",
        "colorRamp" : {
          "type" : "CIMPolarContinuousColorRamp",
          "colorSpace" : {
            "type" : "CIMICCColorSpace",
            "url" : "Default RGB"
          },
          "fromColor" : {
            "type" : "CIMHSVColor",
            "values" : [
              60,
              100,
              96,
              100
            ]
          },
          "toColor" : {
            "type" : "CIMHSVColor",
            "values" : [
              0,
              100,
              96,
              100
            ]
          },
          "interpolationSpace" : "HSV",
          "polarDirection" : "Auto"
        },
        "field" : "max_vel",
        "heading" : "max_vel",
        "polygonSymbolColorTarget" : "Fill",
        "drawGraduatedSymbolsAboveAllLayers" : true,
        "classificationMethod" : "NaturalBreaks",
        "breaks" : [
          {
            "type" : "CIMClassBreak",
            "label" : "-17.358433 - -7.201405",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  60,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : -7.2014050483703613
          },
          {
            "type" : "CIMClassBreak",
            "label" : "-7.201404 - -4.814445",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  53.329999999999998,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : -4.8144445419311523
          },
          {
            "type" : "CIMClassBreak",
            "label" : "-4.814444 - -3.187680",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  46.670000000000002,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : -3.1876795291900635
          },
          {
            "type" : "CIMClassBreak",
            "label" : "-3.187679 - -1.814547",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  40,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : -1.8145469427108765
          },
          {
            "type" : "CIMClassBreak",
            "label" : "-1.814546 - -0.570864",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  33.340000000000003,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : -0.57086402177810669
          },
          {
            "type" : "CIMClassBreak",
            "label" : "-0.570863 - 0.822084",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  26.66,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : 0.82208406925201416
          },
          {
            "type" : "CIMClassBreak",
            "label" : "0.822085 - 2.717969",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  20,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : 2.7179687023162842
          },
          {
            "type" : "CIMClassBreak",
            "label" : "2.717970 - 4.793276",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  13.33,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : 4.7932758331298828
          },
          {
            "type" : "CIMClassBreak",
            "label" : "4.793277 - 7.325332",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  6.6699999999999999,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : 7.3253321647644043
          },
          {
            "type" : "CIMClassBreak",
            "label" : "7.325333 - 14.429658",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Z",
                    "size" : 4,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -2,
                      "ymin" : -2,
                      "xmax" : 2,
                      "ymax" : 2
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              {
                                "a" : [
                                  [
                                    1.2246467991473532e-16,
                                    2
                                  ],
                                  [
                                    2.1431318985078681e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0.69999999999999996,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMHSVColor",
                                "values" : [
                                  0,
                                  100,
                                  96,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : 14.429657936096191
          }
        ],
        "minimumBreak" : -17.358432769775391,
        "showInAscendingOrder" : true,
        "defaultSymbolPatch" : "Default",
        "defaultSymbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMPointSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMVectorMarker",
                "enable" : true,
                "anchorPointUnits" : "Relative",
                "dominantSizeAxis3D" : "Z",
                "size" : 4,
                "billboardMode3D" : "FaceNearPlane",
                "frame" : {
                  "xmin" : -2,
                  "ymin" : -2,
                  "xmax" : 2,
                  "ymax" : 2
                },
                "markerGraphics" : [
                  {
                    "type" : "CIMMarkerGraphic",
                    "geometry" : {
                      "curveRings" : [
                        [
                          [
                            1.2246467991473532e-16,
                            2
                          ],
                          {
                            "a" : [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              [
                                2.1431318985078681e-16,
                                0
                              ],
                              0,
                              1
                            ]
                          }
                        ]
                      ]
                    },
                    "symbol" : {
                      "type" : "CIMPolygonSymbol",
                      "symbolLayers" : [
                        {
                          "type" : "CIMSolidStroke",
                          "enable" : true,
                          "capStyle" : "Round",
                          "joinStyle" : "Round",
                          "lineStyle3D" : "Strip",
                          "miterLimit" : 10,
                          "width" : 0.69999999999999996,
                          "height3D" : 1,
                          "anchor3D" : "Center",
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              0,
                              0,
                              0,
                              100
                            ]
                          }
                        },
                        {
                          "type" : "CIMSolidFill",
                          "enable" : true,
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              130,
                              130,
                              130,
                              100
                            ]
                          }
                        }
                      ],
                      "angleAlignment" : "Map"
                    }
                  }
                ],
                "scaleSymbolsProportionally" : true,
                "respectFrame" : true
              }
            ],
            "haloSize" : 1,
            "scaleX" : 1,
            "angleAlignment" : "Display"
          }
        },
        "defaultLabel" : "<out of range>",
        "numberFormat" : {
          "type" : "CIMNumericFormat",
          "alignmentOption" : "esriAlignLeft",
          "alignmentWidth" : 0,
          "roundingOption" : "esriRoundNumberOfDecimals",
          "roundingValue" : 6,
          "zeroPad" : true
        },
        "alwaysUpdateClassLabels" : true,
        "sampleSize" : 10000,
        "normalizationType" : "Nothing",
        "exclusionLabel" : "<excluded>",
        "exclusionSymbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMPointSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMVectorMarker",
                "enable" : true,
                "anchorPointUnits" : "Relative",
                "dominantSizeAxis3D" : "Z",
                "size" : 4,
                "billboardMode3D" : "FaceNearPlane",
                "frame" : {
                  "xmin" : -2,
                  "ymin" : -2,
                  "xmax" : 2,
                  "ymax" : 2
                },
                "markerGraphics" : [
                  {
                    "type" : "CIMMarkerGraphic",
                    "geometry" : {
                      "curveRings" : [
                        [
                          [
                            1.2246467991473532e-16,
                            2
                          ],
                          {
                            "a" : [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              [
                                2.1431318985078681e-16,
                                0
                              ],
                              0,
                              1
                            ]
                          }
                        ]
                      ]
                    },
                    "symbol" : {
                      "type" : "CIMPolygonSymbol",
                      "symbolLayers" : [
                        {
                          "type" : "CIMSolidStroke",
                          "enable" : true,
                          "capStyle" : "Round",
                          "joinStyle" : "Round",
                          "lineStyle3D" : "Strip",
                          "miterLimit" : 10,
                          "width" : 0.69999999999999996,
                          "height3D" : 1,
                          "anchor3D" : "Center",
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              0,
                              0,
                              0,
                              100
                            ]
                          }
                        },
                        {
                          "type" : "CIMSolidFill",
                          "enable" : true,
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              255,
                              0,
                              0,
                              100
                            ]
                          }
                        }
                      ],
                      "angleAlignment" : "Map"
                    }
                  }
                ],
                "scaleSymbolsProportionally" : true,
                "respectFrame" : true
              }
            ],
            "haloSize" : 1,
            "scaleX" : 1,
            "angleAlignment" : "Display"
          }
        },
        "useExclusionSymbol" : false,
        "exclusionSymbolPatch" : "Default"
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\MaximumWSE.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/MaximumWSE.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "MaximumWSE",
      "uRI" : "CIMPATH=Map/MaximumWSE.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "MaximumWSE",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : false,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "MaximumWSE",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Point",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "Unambiguous",
            "constrainOffset" : "NoConstraint",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "enablePointPlacementPriorities" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : true
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetCurvedFromLine",
            "maximumLabelOverrun" : 36,
            "maximumLabelOverrunUnit" : "Point",
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerPart",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Percentage",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMClassBreaksRenderer",
        "barrierWeight" : "High",
        "classBreakType" : "UnclassedColor",
        "colorRamp" : {
          "type" : "CIMMultipartColorRamp",
          "colorSpace" : {
            "type" : "CIMICCColorSpace",
            "url" : "Default RGB"
          },
          "colorRamps" : [
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  247,
                  251,
                  255,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  222,
                  235,
                  247,
                  100
                ]
              }
            },
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  222,
                  235,
                  247,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  198,
                  219,
                  239,
                  100
                ]
              }
            },
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  198,
                  219,
                  239,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  158,
                  202,
                  225,
                  100
                ]
              }
            },
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  158,
                  202,
                  225,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  107,
                  174,
                  214,
                  100
                ]
              }
            },
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  107,
                  174,
                  214,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  66,
                  146,
                  198,
                  100
                ]
              }
            },
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  66,
                  146,
                  198,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  33,
                  113,
                  181,
                  100
                ]
              }
            },
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  33,
                  113,
                  181,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  8,
                  81,
                  156,
                  100
                ]
              }
            },
            {
              "type" : "CIMLinearContinuousColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "fromColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  8,
                  81,
                  156,
                  100
                ]
              },
              "toColor" : {
                "type" : "CIMRGBColor",
                "colorSpace" : {
                  "type" : "CIMICCColorSpace",
                  "url" : "Default RGB"
                },
                "values" : [
                  8,
                  48,
                  107,
                  100
                ]
              }
            }
          ],
          "weights" : [
            0.125,
            0.125,
            0.125,
            0.125,
            0.125,
            0.125,
            0.125,
            0.125
          ]
        },
        "field" : "cell_id",
        "heading" : "cell_id / max_wse",
        "minimumLabel" : "17",
        "polygonSymbolColorTarget" : "Fill",
        "drawGraduatedSymbolsAboveAllLayers" : true,
        "authoringInfo" : {
          "type" : "CIMClassBreaksRendererAuthoringInfo",
          "numberOfHistogramBins" : 10
        },
        "classificationMethod" : "DefinedInterval",
        "breaks" : [
          {
            "type" : "CIMClassBreak",
            "label" : "0",
            "patch" : "Default",
            "symbol" : {
              "type" : "CIMSymbolReference",
              "symbol" : {
                "type" : "CIMPointSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMVectorMarker",
                    "enable" : true,
                    "anchorPoint" : {
                      "x" : 0,
                      "y" : 0,
                      "z" : 0
                    },
                    "anchorPointUnits" : "Relative",
                    "dominantSizeAxis3D" : "Y",
                    "size" : 10,
                    "billboardMode3D" : "FaceNearPlane",
                    "frame" : {
                      "xmin" : -5,
                      "ymin" : -5,
                      "xmax" : 5,
                      "ymax" : 5
                    },
                    "markerGraphics" : [
                      {
                        "type" : "CIMMarkerGraphic",
                        "geometry" : {
                          "curveRings" : [
                            [
                              [
                                0,
                                5
                              ],
                              {
                                "a" : [
                                  [
                                    0,
                                    5
                                  ],
                                  [
                                    1.5308084989341916e-16,
                                    0
                                  ],
                                  0,
                                  1
                                ]
                              }
                            ]
                          ]
                        },
                        "symbol" : {
                          "type" : "CIMPolygonSymbol",
                          "symbolLayers" : [
                            {
                              "type" : "CIMSolidStroke",
                              "enable" : true,
                              "capStyle" : "Round",
                              "joinStyle" : "Round",
                              "lineStyle3D" : "Strip",
                              "miterLimit" : 10,
                              "width" : 0,
                              "height3D" : 1,
                              "anchor3D" : "Center",
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  0,
                                  0,
                                  0,
                                  100
                                ]
                              }
                            },
                            {
                              "type" : "CIMSolidFill",
                              "enable" : true,
                              "color" : {
                                "type" : "CIMRGBColor",
                                "values" : [
                                  130,
                                  130,
                                  130,
                                  100
                                ]
                              }
                            }
                          ],
                          "angleAlignment" : "Map"
                        }
                      }
                    ],
                    "scaleSymbolsProportionally" : true,
                    "respectFrame" : true
                  }
                ],
                "haloSize" : 1,
                "scaleX" : 1,
                "angleAlignment" : "Display"
              }
            },
            "upperBound" : 17.215049704511472
          }
        ],
        "showInAscendingOrder" : true,
        "defaultSymbolPatch" : "Default",
        "defaultSymbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMPointSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMVectorMarker",
                "enable" : true,
                "anchorPointUnits" : "Relative",
                "dominantSizeAxis3D" : "Z",
                "size" : 4,
                "billboardMode3D" : "FaceNearPlane",
                "frame" : {
                  "xmin" : -2,
                  "ymin" : -2,
                  "xmax" : 2,
                  "ymax" : 2
                },
                "markerGraphics" : [
                  {
                    "type" : "CIMMarkerGraphic",
                    "geometry" : {
                      "curveRings" : [
                        [
                          [
                            1.2246467991473532e-16,
                            2
                          ],
                          {
                            "a" : [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              [
                                1.2246467991473532e-16,
                                0
                              ],
                              0,
                              1
                            ]
                          }
                        ]
                      ]
                    },
                    "symbol" : {
                      "type" : "CIMPolygonSymbol",
                      "symbolLayers" : [
                        {
                          "type" : "CIMSolidStroke",
                          "enable" : true,
                          "capStyle" : "Round",
                          "joinStyle" : "Round",
                          "lineStyle3D" : "Strip",
                          "miterLimit" : 10,
                          "width" : 0.69999999999999996,
                          "height3D" : 1,
                          "anchor3D" : "Center",
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              0,
                              0,
                              0,
                              100
                            ]
                          }
                        },
                        {
                          "type" : "CIMSolidFill",
                          "enable" : true,
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              130,
                              130,
                              130,
                              100
                            ]
                          }
                        }
                      ],
                      "angleAlignment" : "Map"
                    }
                  }
                ],
                "scaleSymbolsProportionally" : true,
                "respectFrame" : true
              }
            ],
            "haloSize" : 1,
            "scaleX" : 1,
            "angleAlignment" : "Display"
          }
        },
        "defaultLabel" : "<null>",
        "numberFormat" : {
          "type" : "CIMNumericFormat",
          "alignmentOption" : "esriAlignRight",
          "alignmentWidth" : 0,
          "roundingOption" : "esriRoundNumberOfDecimals",
          "roundingValue" : 0
        },
        "alwaysUpdateClassLabels" : true,
        "sampleSize" : 10000,
        "normalizationField" : "max_wse",
        "normalizationType" : "Field",
        "useExclusionSymbol" : false,
        "exclusionSymbolPatch" : "Default",
        "visualVariables" : [
          {
            "type" : "CIMColorVisualVariable",
            "maxValue" : 17.215049704511472,
            "colorRamp" : {
              "type" : "CIMMultipartColorRamp",
              "colorSpace" : {
                "type" : "CIMICCColorSpace",
                "url" : "Default RGB"
              },
              "colorRamps" : [
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      247,
                      251,
                      255,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      222,
                      235,
                      247,
                      100
                    ]
                  }
                },
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      222,
                      235,
                      247,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      198,
                      219,
                      239,
                      100
                    ]
                  }
                },
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      198,
                      219,
                      239,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      158,
                      202,
                      225,
                      100
                    ]
                  }
                },
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      158,
                      202,
                      225,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      107,
                      174,
                      214,
                      100
                    ]
                  }
                },
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      107,
                      174,
                      214,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      66,
                      146,
                      198,
                      100
                    ]
                  }
                },
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      66,
                      146,
                      198,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      33,
                      113,
                      181,
                      100
                    ]
                  }
                },
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      33,
                      113,
                      181,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      8,
                      81,
                      156,
                      100
                    ]
                  }
                },
                {
                  "type" : "CIMLinearContinuousColorRamp",
                  "colorSpace" : {
                    "type" : "CIMICCColorSpace",
                    "url" : "Default RGB"
                  },
                  "fromColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      8,
                      81,
                      156,
                      100
                    ]
                  },
                  "toColor" : {
                    "type" : "CIMRGBColor",
                    "colorSpace" : {
                      "type" : "CIMICCColorSpace",
                      "url" : "Default RGB"
                    },
                    "values" : [
                      8,
                      48,
                      107,
                      100
                    ]
                  }
                }
              ],
              "weights" : [
                0.125,
                0.125,
                0.125,
                0.125,
                0.125,
                0.125,
                0.125,
                0.125
              ]
            },
            "normalizationField" : "max_wse",
            "normalizationType" : "Field",
            "valueExpressionInfo" : {
              "type" : "CIMExpressionInfo",
              "title" : "Custom",
              "expression" : "$feature.cell_id",
              "returnType" : "Default"
            },
            "polygonSymbolColorTarget" : "Fill"
          }
        ]
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\MeshCellCenters.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/MeshCellCenters.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "MeshCellCenters",
      "uRI" : "CIMPATH=Map/MeshCellCenters.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "MeshCellCenters",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "MeshCellCenters",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Point",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "Unambiguous",
            "constrainOffset" : "NoConstraint",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "enablePointPlacementPriorities" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : true
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetCurvedFromLine",
            "maximumLabelOverrun" : 36,
            "maximumLabelOverrunUnit" : "Point",
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerPart",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Percentage",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMPointSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMVectorMarker",
                "enable" : true,
                "anchorPointUnits" : "Relative",
                "dominantSizeAxis3D" : "Z",
                "size" : 4,
                "billboardMode3D" : "FaceNearPlane",
                "frame" : {
                  "xmin" : -2,
                  "ymin" : -2,
                  "xmax" : 2,
                  "ymax" : 2
                },
                "markerGraphics" : [
                  {
                    "type" : "CIMMarkerGraphic",
                    "geometry" : {
                      "curveRings" : [
                        [
                          [
                            1.2246467991473532e-16,
                            2
                          ],
                          {
                            "a" : [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              [
                                2.2962127484012875e-16,
                                0
                              ],
                              0,
                              1
                            ]
                          }
                        ]
                      ]
                    },
                    "symbol" : {
                      "type" : "CIMPolygonSymbol",
                      "symbolLayers" : [
                        {
                          "type" : "CIMSolidStroke",
                          "enable" : true,
                          "capStyle" : "Round",
                          "joinStyle" : "Round",
                          "lineStyle3D" : "Strip",
                          "miterLimit" : 10,
                          "width" : 0.69999999999999996,
                          "height3D" : 1,
                          "anchor3D" : "Center",
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              0,
                              0,
                              0,
                              100
                            ]
                          }
                        },
                        {
                          "type" : "CIMSolidFill",
                          "enable" : true,
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              0,
                              0,
                              0,
                              100
                            ]
                          }
                        }
                      ],
                      "angleAlignment" : "Map"
                    }
                  }
                ],
                "scaleSymbolsProportionally" : true,
                "respectFrame" : true
              }
            ],
            "haloSize" : 1,
            "scaleX" : 1,
            "angleAlignment" : "Display"
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\MeshCellFaces.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/MeshCellFaces.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "MeshCellFaces",
      "uRI" : "CIMPATH=Map/MeshCellFaces.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "MeshCellFaces",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "MeshCellFaces",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Line",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "MinimizeLabels",
            "constrainOffset" : "AboveLine",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : false
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetStraightFromLine",
            "maximumLabelOverrun" : 16,
            "maximumLabelOverrunUnit" : "Point",
            "measureFromClippedFeatureGeometry" : true,
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerFeature",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Map",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMLineSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMSolidStroke",
                "enable" : true,
                "capStyle" : "Square",
                "joinStyle" : "Miter",
                "lineStyle3D" : "Strip",
                "miterLimit" : 10,
                "width" : 0.5,
                "height3D" : 1,
                "anchor3D" : "Center",
                "color" : {
                  "type" : "CIMRGBColor",
                  "values" : [
                    0,
                    0,
                    0,
                    100
                  ]
                }
              }
            ]
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\MeshCellPolygons.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/MeshCellPolygons.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "MeshCellPolygons",
      "uRI" : "CIMPATH=Map/MeshCellPolygons.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "MeshCellPolygons",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : false,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "MeshCellPolygons",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Polygon",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "Unambiguous",
            "constrainOffset" : "NoConstraint",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : true
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetCurvedFromLine",
            "maximumLabelOverrun" : 80,
            "maximumLabelOverrunUnit" : "Point",
            "measureFromClippedFeatureGeometry" : true,
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerPart",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Percentage",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "HorizontalInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMPolygonSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMSolidStroke",
                "enable" : true,
                "capStyle" : "Round",
                "joinStyle" : "Round",
                "lineStyle3D" : "Strip",
                "miterLimit" : 10,
                "width" : 1,
                "height3D" : 1,
                "anchor3D" : "Center",
                "color" : {
                  "type" : "CIMRGBColor",
                  "values" : [
                    0,
                    0,
                    0,
                    100
                  ]
                }
              },
              {
                "type" : "CIMSolidFill",
                "enable" : true,
                "color" : {
                  "type" : "CIMRGBColor",
                  "values" : [
                    130,
                    130,
                    130,
                    0
                  ]
                }
              }
            ],
            "angleAlignment" : "Map"
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\MeshPerimeters.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/MeshPerimeters.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "MeshPerimeters",
      "uRI" : "CIMPATH=Map/MeshPerimeters.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "MeshPerimeters",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : false,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "MeshPerimeters",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Polygon",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "Unambiguous",
            "constrainOffset" : "NoConstraint",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : true
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetCurvedFromLine",
            "maximumLabelOverrun" : 80,
            "maximumLabelOverrunUnit" : "Point",
            "measureFromClippedFeatureGeometry" : true,
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerPart",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Percentage",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "HorizontalInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMPolygonSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMSolidStroke",
                "enable" : true,
                "name" : "New_3872a0c5-9e91-471e-9867-b397888d9d1d",
                "capStyle" : "Round",
                "joinStyle" : "Round",
                "lineStyle3D" : "Strip",
                "miterLimit" : 10,
                "width" : 3,
                "height3D" : 1,
                "anchor3D" : "Center",
                "color" : {
                  "type" : "CIMRGBColor",
                  "values" : [
                    178,
                    178,
                    178,
                    100
                  ]
                }
              }
            ],
            "angleAlignment" : "Map"
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\PipeConduits.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/PipeConduits.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "Pipe Conduits",
      "uRI" : "CIMPATH=Map/PipeConduits.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Pipe Conduits",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "PipeConduits",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Line",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "MinimizeLabels",
            "constrainOffset" : "AboveLine",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : false
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetStraightFromLine",
            "maximumLabelOverrun" : 16,
            "maximumLabelOverrunUnit" : "Point",
            "measureFromClippedFeatureGeometry" : true,
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerFeature",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Map",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        0,
                        0,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMLineSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMSolidStroke",
                "enable" : true,
                "capStyle" : "Square",
                "joinStyle" : "Miter",
                "lineStyle3D" : "Strip",
                "miterLimit" : 10,
                "width" : 3,
                "height3D" : 1,
                "anchor3D" : "Center",
                "color" : {
                  "type" : "CIMRGBColor",
                  "values" : [
                    0,
                    92,
                    230,
                    100
                  ]
                }
              }
            ]
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

File: c:\GH\ras-commander-hydro\Templates\Layers\archydro\ras-commander\PipeNodes.lyrx
==================================================
{
  "type" : "CIMLayerDocument",
  "version" : "3.5.0",
  "build" : 57366,
  "layers" : [
    "CIMPATH=Map/PipeNodes.json"
  ],
  "layerDefinitions" : [
    {
      "type" : "CIMFeatureLayer",
      "name" : "Pipe Nodes",
      "uRI" : "CIMPATH=Map/PipeNodes.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Pipe Nodes",
      "layerElevation" : {
        "type" : "CIMLayerElevationSurface",
        "elevationSurfaceLayerURI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json"
      },
      "expanded" : true,
      "layerType" : "Operational",
      "showLegends" : true,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "autoGenerateFeatureTemplates" : true,
      "featureElevationExpression" : "0",
      "featureTable" : {
        "type" : "CIMFeatureTable",
        "displayField" : "mesh_name",
        "editable" : true,
        "dataConnection" : {
          "type" : "CIMStandardDataConnection",
          "workspaceConnectionString" : "INSTANCE_ID=GPProMemoryWorkspace",
          "workspaceFactory" : "InMemoryDB",
          "dataset" : "PipeNodes",
          "datasetType" : "esriDTFeatureClass"
        },
        "studyAreaSpatialRel" : "esriSpatialRelUndefined",
        "searchOrder" : "esriSearchOrderSpatial"
      },
      "htmlPopupEnabled" : true,
      "selectable" : true,
      "featureCacheType" : "Session",
      "displayFiltersType" : "ByScale",
      "featureBlendingMode" : "Alpha",
      "layerEffectsMode" : "Layer",
      "labelClasses" : [
        {
          "type" : "CIMLabelClass",
          "expressionTitle" : "Custom",
          "expression" : "$feature['mesh_name']",
          "expressionEngine" : "Arcade",
          "featuresToLabel" : "AllVisibleFeatures",
          "maplexLabelPlacementProperties" : {
            "type" : "CIMMaplexLabelPlacementProperties",
            "featureType" : "Point",
            "avoidPolygonHoles" : true,
            "canOverrunFeature" : true,
            "canPlaceLabelOutsidePolygon" : true,
            "canRemoveOverlappingLabel" : true,
            "canStackLabel" : true,
            "centerLabelAnchorType" : "Symbol",
            "connectionType" : "Unambiguous",
            "constrainOffset" : "NoConstraint",
            "contourAlignmentType" : "Page",
            "contourLadderType" : "Straight",
            "contourMaximumAngle" : 90,
            "enableConnection" : true,
            "enablePointPlacementPriorities" : true,
            "featureWeight" : 0,
            "fontHeightReductionLimit" : 4,
            "fontHeightReductionStep" : 0.5,
            "fontWidthReductionLimit" : 90,
            "fontWidthReductionStep" : 5,
            "graticuleAlignmentType" : "Straight",
            "keyNumberGroupName" : "Default",
            "labelBuffer" : 15,
            "labelLargestPolygon" : true,
            "labelPriority" : -1,
            "labelStackingProperties" : {
              "type" : "CIMMaplexLabelStackingProperties",
              "stackAlignment" : "ChooseBest",
              "maximumNumberOfLines" : 3,
              "minimumNumberOfCharsPerLine" : 3,
              "maximumNumberOfCharsPerLine" : 24,
              "separators" : [
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : " ",
                  "splitAfter" : true
                },
                {
                  "type" : "CIMMaplexStackingSeparator",
                  "separator" : ",",
                  "visible" : true,
                  "splitAfter" : true
                }
              ],
              "trimStackingSeparators" : true,
              "preferToStackLongLabels" : true
            },
            "lineFeatureType" : "General",
            "linePlacementMethod" : "OffsetCurvedFromLine",
            "maximumLabelOverrun" : 36,
            "maximumLabelOverrunUnit" : "Point",
            "minimumFeatureSizeUnit" : "Map",
            "multiPartOption" : "OneLabelPerPart",
            "offsetAlongLineProperties" : {
              "type" : "CIMMaplexOffsetAlongLineProperties",
              "placementMethod" : "BestPositionAlongLine",
              "labelAnchorPoint" : "CenterOfLabel",
              "distanceUnit" : "Percentage",
              "useLineDirection" : true
            },
            "pointExternalZonePriorities" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "pointPlacementMethod" : "AroundPoint",
            "polygonAnchorPointType" : "GeometricCenter",
            "polygonBoundaryWeight" : 0,
            "polygonExternalZones" : {
              "type" : "CIMMaplexExternalZonePriorities",
              "aboveLeft" : 4,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerRight" : 3,
              "belowRight" : 5,
              "belowCenter" : 7,
              "belowLeft" : 8,
              "centerLeft" : 6
            },
            "polygonFeatureType" : "General",
            "polygonInternalZones" : {
              "type" : "CIMMaplexInternalZonePriorities",
              "center" : 1
            },
            "polygonPlacementMethod" : "CurvedInPolygon",
            "primaryOffset" : 1,
            "primaryOffsetUnit" : "Point",
            "removeAmbiguousLabels" : "All",
            "removeExtraWhiteSpace" : true,
            "repetitionIntervalUnit" : "Point",
            "rotationProperties" : {
              "type" : "CIMMaplexRotationProperties",
              "rotationType" : "Arithmetic",
              "alignmentType" : "Straight"
            },
            "secondaryOffset" : 100,
            "secondaryOffsetUnit" : "Percentage",
            "strategyPriorities" : {
              "type" : "CIMMaplexStrategyPriorities",
              "stacking" : 1,
              "overrun" : 2,
              "fontCompression" : 3,
              "fontReduction" : 4,
              "abbreviation" : 5
            },
            "thinningDistanceUnit" : "Point",
            "truncationMarkerCharacter" : ".",
            "truncationMinimumLength" : 1,
            "truncationPreferredCharacters" : "aeiou",
            "truncationExcludedCharacters" : "0123456789",
            "polygonAnchorPointPerimeterInsetUnit" : "Point"
          },
          "name" : "Class 1",
          "priority" : -1,
          "standardLabelPlacementProperties" : {
            "type" : "CIMStandardLabelPlacementProperties",
            "featureType" : "Line",
            "featureWeight" : "None",
            "labelWeight" : "High",
            "numLabelsOption" : "OneLabelPerName",
            "lineLabelPosition" : {
              "type" : "CIMStandardLineLabelPosition",
              "above" : true,
              "inLine" : true,
              "parallel" : true
            },
            "lineLabelPriorities" : {
              "type" : "CIMStandardLineLabelPriorities",
              "aboveStart" : 3,
              "aboveAlong" : 3,
              "aboveEnd" : 3,
              "centerStart" : 3,
              "centerAlong" : 3,
              "centerEnd" : 3,
              "belowStart" : 3,
              "belowAlong" : 3,
              "belowEnd" : 3
            },
            "pointPlacementMethod" : "AroundPoint",
            "pointPlacementPriorities" : {
              "type" : "CIMStandardPointPlacementPriorities",
              "aboveLeft" : 2,
              "aboveCenter" : 2,
              "aboveRight" : 1,
              "centerLeft" : 3,
              "centerRight" : 2,
              "belowLeft" : 3,
              "belowCenter" : 3,
              "belowRight" : 2
            },
            "rotationType" : "Arithmetic",
            "polygonPlacementMethod" : "AlwaysHorizontal"
          },
          "textSymbol" : {
            "type" : "CIMSymbolReference",
            "symbol" : {
              "type" : "CIMTextSymbol",
              "blockProgression" : "TTB",
              "depth3D" : 1,
              "extrapolateBaselines" : true,
              "fontEffects" : "Normal",
              "fontEncoding" : "Unicode",
              "fontFamilyName" : "Tahoma",
              "fontStyleName" : "Regular",
              "fontType" : "Unspecified",
              "haloSize" : 1,
              "height" : 10,
              "hinting" : "Default",
              "horizontalAlignment" : "Left",
              "kerning" : true,
              "letterWidth" : 100,
              "ligatures" : true,
              "lineGapType" : "ExtraLeading",
              "symbol" : {
                "type" : "CIMPolygonSymbol",
                "symbolLayers" : [
                  {
                    "type" : "CIMSolidFill",
                    "enable" : true,
                    "color" : {
                      "type" : "CIMRGBColor",
                      "values" : [
                        0,
                        169,
                        230,
                        100
                      ]
                    }
                  }
                ],
                "angleAlignment" : "Map"
              },
              "textCase" : "Normal",
              "textDirection" : "LTR",
              "verticalAlignment" : "Bottom",
              "verticalGlyphOrientation" : "Right",
              "wordSpacing" : 100,
              "billboardMode3D" : "FaceNearPlane"
            }
          },
          "useCodedValue" : true,
          "visibility" : true,
          "iD" : -1
        }
      ],
      "renderer" : {
        "type" : "CIMSimpleRenderer",
        "sampleSize" : 10000,
        "patch" : "Default",
        "symbol" : {
          "type" : "CIMSymbolReference",
          "symbol" : {
            "type" : "CIMPointSymbol",
            "symbolLayers" : [
              {
                "type" : "CIMVectorMarker",
                "enable" : true,
                "anchorPointUnits" : "Relative",
                "dominantSizeAxis3D" : "Z",
                "size" : 8,
                "billboardMode3D" : "FaceNearPlane",
                "frame" : {
                  "xmin" : -2,
                  "ymin" : -2,
                  "xmax" : 2,
                  "ymax" : 2
                },
                "markerGraphics" : [
                  {
                    "type" : "CIMMarkerGraphic",
                    "geometry" : {
                      "curveRings" : [
                        [
                          [
                            1.2246467991473532e-16,
                            2
                          ],
                          {
                            "a" : [
                              [
                                1.2246467991473532e-16,
                                2
                              ],
                              [
                                2.2962127484012875e-16,
                                0
                              ],
                              0,
                              1
                            ]
                          }
                        ]
                      ]
                    },
                    "symbol" : {
                      "type" : "CIMPolygonSymbol",
                      "symbolLayers" : [
                        {
                          "type" : "CIMSolidStroke",
                          "enable" : true,
                          "capStyle" : "Round",
                          "joinStyle" : "Round",
                          "lineStyle3D" : "Strip",
                          "miterLimit" : 10,
                          "width" : 0.69999999999999996,
                          "height3D" : 1,
                          "anchor3D" : "Center",
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              0,
                              0,
                              0,
                              100
                            ]
                          }
                        },
                        {
                          "type" : "CIMSolidFill",
                          "enable" : true,
                          "color" : {
                            "type" : "CIMRGBColor",
                            "values" : [
                              0,
                              0,
                              0,
                              100
                            ]
                          }
                        }
                      ],
                      "angleAlignment" : "Map"
                    }
                  }
                ],
                "scaleSymbolsProportionally" : true,
                "respectFrame" : true
              }
            ],
            "haloSize" : 1,
            "scaleX" : 1,
            "angleAlignment" : "Display"
          }
        }
      },
      "scaleSymbols" : true,
      "snappable" : true
    }
  ],
  "rGBColorProfile" : "sRGB IEC61966-2.1",
  "cMYKColorProfile" : "U.S. Web Coated (SWOP) v2",
  "elevationSurfaceLayerDefinitions" : [
    {
      "type" : "CIMElevationSurfaceLayer",
      "name" : "Ground",
      "uRI" : "CIMPATH=Map/c69270077f7d4823864a121ab2635216.json",
      "sourceModifiedTime" : {
        "type" : "TimeInstant"
      },
      "useSourceMetadata" : true,
      "description" : "Ground",
      "expanded" : true,
      "layer3DProperties" : {
        "type" : "CIM3DLayerProperties",
        "castShadows" : true,
        "isLayerLit" : true,
        "layerFaceCulling" : "None",
        "preloadTextureCutoffHigh" : 0.29999999999999999,
        "preloadTextureCutoffLow" : 0.59999999999999998,
        "textureCutoffHigh" : 0.29999999999999999,
        "textureCutoffLow" : 0.59999999999999998,
        "useCompressedTextures" : true,
        "verticalExaggeration" : 1,
        "exaggerationMode" : "ScaleZ",
        "lighting" : "OneSideDataNormal",
        "optimizeMarkerTransparency" : true
      },
      "layerType" : "Operational",
      "showLegends" : false,
      "visibility" : true,
      "displayCacheType" : "Permanent",
      "maxDisplayCacheAge" : 5,
      "showPopups" : true,
      "serviceLayerID" : -1,
      "refreshRate" : -1,
      "refreshRateUnit" : "esriTimeUnitsSeconds",
      "blendingMode" : "Alpha",
      "allowDrapingOnIntegratedMesh" : true,
      "elevationMode" : "BaseGlobeSurface",
      "verticalExaggeration" : 1,
      "color" : {
        "type" : "CIMRGBColor",
        "values" : [
          255,
          255,
          255,
          100
        ]
      },
      "surfaceTINShadingMode" : "Smooth"
    }
  ]
}
==================================================

